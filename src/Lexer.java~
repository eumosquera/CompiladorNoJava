// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


@SuppressWarnings("fallthrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\4\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\11\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\2\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\40\1\46\1\47\1\50\1\51"+
    "\1\52\1\40\1\53\1\54\1\55\1\56\1\0\1\57"+
    "\1\0\1\40\1\0\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\2\40\1\71\1\72\1\73"+
    "\1\74\1\75\1\40\1\76\1\77\1\100\1\101\1\102"+
    "\1\40\1\103\1\54\1\104\1\105\1\0\1\106\7\0"+
    "\1\3\73\0\1\107\7\0\1\107\3\0\1\107\3\0"+
    "\1\107\1\0\1\107\6\0\1\107\1\0\1\107\4\0"+
    "\1\107\7\0\1\107\3\0\1\107\3\0\1\107\1\0"+
    "\1\107\6\0\1\107\1\0\1\107\u012b\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\12\23\1\24\5\23\1\25"+
    "\1\26\1\27\16\23\1\30\1\31\1\32\1\33\1\0"+
    "\1\34\1\35\1\0\1\2\1\0\1\36\1\37\1\40"+
    "\12\23\1\41\2\23\1\41\17\23\1\42\15\23\1\43"+
    "\1\23\1\43\10\23\2\0\2\44\77\23\1\0\1\2"+
    "\2\23\1\45\41\23\1\46\4\23\1\47\1\23\1\44"+
    "\7\23\1\50\14\23\1\51\1\52\12\23\1\53\1\54"+
    "\15\23\1\55\5\23\1\56\10\23\1\57\1\60\7\23"+
    "\1\61\10\23\1\62\2\23\1\63\13\23\1\64\1\23"+
    "\1\65\5\23\1\66\1\23\1\67\1\70\1\71\12\23"+
    "\1\72\1\73\6\23\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\4\23\1\102\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\110\0\220\0\330\0\u0120\0\110\0\110"+
    "\0\110\0\110\0\u0168\0\110\0\u01b0\0\110\0\u01f8\0\u0240"+
    "\0\u0288\0\110\0\110\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0"+
    "\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630"+
    "\0\u03a8\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u03a8\0\110"+
    "\0\110\0\u07e0\0\u0828\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990"+
    "\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\u0b88\0\110"+
    "\0\110\0\110\0\110\0\u0120\0\110\0\110\0\u0bd0\0\u0c18"+
    "\0\u0c60\0\110\0\110\0\110\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80"+
    "\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0"+
    "\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200"+
    "\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8\0\u1440"+
    "\0\u1488\0\u03a8\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638"+
    "\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u1878"+
    "\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8"+
    "\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\110\0\u1c20\0\u1c68\0\u1cb0"+
    "\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0"+
    "\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130"+
    "\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370"+
    "\0\u23b8\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520\0\u2568\0\u25b0"+
    "\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760\0\u27a8\0\u27f0"+
    "\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958\0\u29a0\0\u29e8\0\u2a30"+
    "\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98\0\u2be0\0\u2c28\0\u2c70"+
    "\0\u2cb8\0\u2d00\0\u2d48\0\u2d90\0\u2dd8\0\u2e20\0\u1b90\0\u2e68"+
    "\0\u2eb0\0\u03a8\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060"+
    "\0\u30a8\0\u30f0\0\u3138\0\u3180\0\u31c8\0\u3210\0\u3258\0\u32a0"+
    "\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u3408\0\u3450\0\u3498\0\u34e0"+
    "\0\u3528\0\u3570\0\u35b8\0\u3600\0\u3648\0\u3690\0\u36d8\0\u3720"+
    "\0\u3768\0\u37b0\0\u37f8\0\u03a8\0\u3840\0\u3888\0\u38d0\0\u3918"+
    "\0\u03a8\0\u3960\0\u03a8\0\u39a8\0\u39f0\0\u3a38\0\u3a80\0\u3ac8"+
    "\0\u3b10\0\u3b58\0\u03a8\0\u3ba0\0\u3be8\0\u3c30\0\u3c78\0\u3cc0"+
    "\0\u3d08\0\u3d50\0\u3d98\0\u3de0\0\u3e28\0\u3e70\0\u3eb8\0\u03a8"+
    "\0\u03a8\0\u3f00\0\u3f48\0\u3f90\0\u3fd8\0\u4020\0\u4068\0\u40b0"+
    "\0\u40f8\0\u4140\0\u4188\0\u03a8\0\u03a8\0\u41d0\0\u4218\0\u4260"+
    "\0\u42a8\0\u42f0\0\u4338\0\u4380\0\u43c8\0\u4410\0\u4458\0\u44a0"+
    "\0\u44e8\0\u4530\0\u03a8\0\u4578\0\u45c0\0\u4608\0\u4650\0\u4698"+
    "\0\u03a8\0\u46e0\0\u4728\0\u4770\0\u47b8\0\u4800\0\u4848\0\u4890"+
    "\0\u48d8\0\u03a8\0\u03a8\0\u4920\0\u4968\0\u49b0\0\u49f8\0\u4a40"+
    "\0\u4a88\0\u4ad0\0\u03a8\0\u4b18\0\u4b60\0\u4ba8\0\u4bf0\0\u4c38"+
    "\0\u4c80\0\u4cc8\0\u4d10\0\u03a8\0\u4d58\0\u4da0\0\u03a8\0\u4de8"+
    "\0\u4e30\0\u4e78\0\u4ec0\0\u4f08\0\u4f50\0\u4f98\0\u4fe0\0\u5028"+
    "\0\u5070\0\u50b8\0\u03a8\0\u5100\0\u03a8\0\u5148\0\u5190\0\u51d8"+
    "\0\u5220\0\u5268\0\u03a8\0\u52b0\0\u03a8\0\u03a8\0\u03a8\0\u52f8"+
    "\0\u5340\0\u5388\0\u53d0\0\u5418\0\u5460\0\u54a8\0\u54f0\0\u5538"+
    "\0\u5580\0\u03a8\0\u03a8\0\u55c8\0\u5610\0\u5658\0\u56a0\0\u56e8"+
    "\0\u5730\0\u03a8\0\u03a8\0\u03a8\0\u03a8\0\u03a8\0\u03a8\0\u5778"+
    "\0\u57c0\0\u5808\0\u5850\0\u03a8\0\u03a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\27\1\35\1\36\2\27"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\27"+
    "\1\46\1\27\1\47\1\27\1\50\1\51\1\27\1\52"+
    "\1\53\1\54\1\55\1\56\1\27\1\57\1\60\1\27"+
    "\1\61\1\62\1\41\1\63\1\64\1\65\1\66\1\27"+
    "\1\67\2\27\1\70\1\71\1\27\112\0\1\3\132\0"+
    "\1\72\70\0\1\73\6\0\2\74\1\0\2\74\5\0"+
    "\27\74\2\0\25\74\16\0\1\75\111\0\1\76\104\0"+
    "\1\77\4\0\1\100\106\0\1\101\107\0\1\101\1\0"+
    "\2\21\113\0\1\102\107\0\1\103\107\0\1\104\102\0"+
    "\2\27\5\0\27\27\2\0\25\27\2\0\1\27\20\0"+
    "\2\27\5\0\15\27\1\105\11\27\2\0\14\27\1\106"+
    "\10\27\2\0\1\27\20\0\2\27\5\0\1\107\11\27"+
    "\1\110\2\27\1\111\11\27\2\0\1\112\10\27\1\113"+
    "\2\27\1\114\10\27\2\0\1\27\20\0\2\27\5\0"+
    "\4\27\1\115\22\27\2\0\4\27\1\116\20\27\2\0"+
    "\1\27\20\0\2\27\5\0\14\27\1\117\6\27\1\120"+
    "\1\121\2\27\2\0\13\27\1\122\6\27\1\123\1\124"+
    "\1\27\2\0\1\27\20\0\2\27\5\0\1\125\7\27"+
    "\1\126\1\27\1\127\14\27\2\0\1\130\13\27\1\131"+
    "\10\27\2\0\1\27\20\0\2\27\5\0\4\27\1\132"+
    "\22\27\2\0\4\27\1\133\20\27\2\0\1\27\20\0"+
    "\2\27\5\0\13\27\1\134\1\135\12\27\2\0\12\27"+
    "\1\136\1\137\11\27\2\0\1\27\20\0\2\27\5\0"+
    "\10\27\1\140\16\27\2\0\10\27\1\141\14\27\2\0"+
    "\1\27\20\0\2\27\5\0\15\27\1\142\11\27\2\0"+
    "\14\27\1\142\10\27\2\0\1\27\20\0\2\27\5\0"+
    "\1\143\16\27\1\144\2\27\1\145\4\27\2\0\1\146"+
    "\15\27\1\147\2\27\1\150\3\27\2\0\1\27\20\0"+
    "\2\27\5\0\1\151\3\27\1\152\10\27\1\153\11\27"+
    "\2\0\1\154\3\27\1\155\7\27\1\156\10\27\2\0"+
    "\1\27\20\0\2\27\5\0\1\157\7\27\1\160\16\27"+
    "\2\0\1\161\7\27\1\162\14\27\2\0\1\27\20\0"+
    "\2\27\5\0\4\27\1\163\22\27\2\0\4\27\1\164"+
    "\20\27\2\0\1\27\20\0\2\27\5\0\1\165\3\27"+
    "\1\166\22\27\2\0\1\167\3\27\1\170\20\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\14\27\1\106"+
    "\10\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\1\112\10\27\1\113\2\27\1\114\10\27\2\0\1\27"+
    "\20\0\2\27\5\0\27\27\2\0\4\27\1\116\20\27"+
    "\2\0\1\27\20\0\2\27\5\0\27\27\2\0\13\27"+
    "\1\122\6\27\1\123\1\124\1\27\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\1\130\7\27\1\171\3\27"+
    "\1\172\10\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\4\27\1\133\20\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\12\27\1\136\1\137\11\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\10\27\1\141"+
    "\14\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\14\27\1\142\10\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\1\146\15\27\1\147\2\27\1\150\3\27"+
    "\2\0\1\27\20\0\2\27\5\0\27\27\2\0\1\154"+
    "\3\27\1\155\7\27\1\156\10\27\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\1\161\7\27\1\162\14\27"+
    "\2\0\1\27\20\0\2\27\5\0\27\27\2\0\4\27"+
    "\1\164\20\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\1\167\3\27\1\170\20\27\2\0\1\27\12\173"+
    "\1\174\75\173\2\100\1\3\1\100\1\4\103\100\20\0"+
    "\1\175\1\176\106\0\2\27\5\0\12\27\1\177\14\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\14\27\1\200\10\27\2\0\1\27\20\0\2\27"+
    "\5\0\20\27\1\201\6\27\2\0\25\27\2\0\1\27"+
    "\20\0\2\27\5\0\1\202\26\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\13\27\1\203\13\27\2\0"+
    "\25\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\17\27\1\204\5\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\1\205\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\12\27\1\206\12\27\2\0\1\27"+
    "\20\0\2\27\5\0\2\27\1\207\24\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\27\27\2\0\2\27"+
    "\1\210\22\27\2\0\1\27\20\0\2\27\5\0\21\27"+
    "\1\211\5\27\2\0\25\27\2\0\1\27\20\0\2\27"+
    "\5\0\1\212\26\27\2\0\25\27\2\0\1\27\20\0"+
    "\2\27\5\0\2\27\1\213\24\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\20\27\1\214"+
    "\4\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\1\215\24\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\2\27\1\216\22\27\2\0\1\27\20\0\2\27"+
    "\5\0\12\27\1\217\14\27\2\0\25\27\2\0\1\27"+
    "\20\0\2\27\5\0\14\27\1\220\12\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\15\27\1\221\11\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\11\27\1\222\13\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\20\27\1\223\4\27\2\0\1\27"+
    "\20\0\2\27\5\0\17\27\1\224\7\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\27\27\2\0\16\27"+
    "\1\225\6\27\2\0\1\27\20\0\2\27\5\0\16\27"+
    "\1\226\10\27\2\0\25\27\2\0\1\27\20\0\2\27"+
    "\5\0\10\27\1\227\10\27\1\230\5\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\27\27\2\0\15\27"+
    "\1\231\7\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\10\27\1\232\7\27\1\233\4\27\2\0\1\27"+
    "\20\0\2\27\5\0\4\27\1\234\13\27\1\235\6\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\4\27\1\236\12\27\1\237\5\27\2\0\1\27"+
    "\20\0\2\27\5\0\17\27\1\240\7\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\10\27\1\241\16\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\1\27"+
    "\1\242\25\27\2\0\25\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\16\27\1\243\6\27\2\0\1\27"+
    "\20\0\2\27\5\0\27\27\2\0\10\27\1\244\14\27"+
    "\2\0\1\27\20\0\2\27\5\0\27\27\2\0\1\27"+
    "\1\245\23\27\2\0\1\27\20\0\2\27\5\0\10\27"+
    "\1\246\3\27\1\247\12\27\2\0\25\27\2\0\1\27"+
    "\20\0\2\27\5\0\1\250\20\27\1\251\5\27\2\0"+
    "\25\27\2\0\1\27\20\0\2\27\5\0\13\27\1\252"+
    "\13\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\10\27\1\253\2\27\1\254\11\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\1\255\17\27"+
    "\1\256\4\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\12\27\1\257\12\27\2\0\1\27\20\0\2\27"+
    "\5\0\12\27\1\260\14\27\2\0\25\27\2\0\1\27"+
    "\20\0\2\27\5\0\6\27\1\261\5\27\1\262\12\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\11\27\1\263\13\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\6\27\1\264\4\27\1\265\11\27"+
    "\2\0\1\27\20\0\2\27\5\0\24\27\1\266\2\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\23\27\1\267\1\27\2\0\1\27\20\0\2\27"+
    "\5\0\2\27\1\270\24\27\2\0\25\27\2\0\1\27"+
    "\20\0\2\27\5\0\17\27\1\271\7\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\27\27\2\0\2\27"+
    "\1\272\22\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\16\27\1\273\6\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\13\27\1\274\11\27\2\0\1\27"+
    "\20\0\2\27\5\0\27\27\2\0\20\27\1\275\4\27"+
    "\2\0\1\27\12\173\1\276\107\173\1\276\4\173\1\277"+
    "\70\173\20\0\2\176\106\0\2\27\5\0\4\27\1\300"+
    "\22\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\11\27\1\301\13\27\2\0\1\27\20\0"+
    "\2\27\5\0\15\27\1\302\11\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\20\27\1\303\6\27\2\0"+
    "\25\27\2\0\1\27\20\0\2\27\5\0\22\27\1\304"+
    "\4\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\14\27\1\302\10\27\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\17\27\1\305\5\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\21\27\1\306"+
    "\3\27\2\0\1\27\20\0\2\27\5\0\10\27\1\307"+
    "\16\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\10\27\1\310\14\27\2\0\1\27\20\0"+
    "\2\27\5\0\4\27\1\311\12\27\1\312\7\27\2\0"+
    "\25\27\2\0\1\27\20\0\2\27\5\0\12\27\1\313"+
    "\14\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\4\27\1\314\22\27\2\0\25\27\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\4\27\1\315\11\27\1\316"+
    "\6\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\11\27\1\317\13\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\4\27\1\320\20\27\2\0\1\27\20\0"+
    "\2\27\5\0\20\27\1\321\6\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\1\322\26\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\21\27\1\323\5\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\17\27\1\324\5\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\1\325\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\4\27\1\326\22\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\4\27\1\327"+
    "\20\27\2\0\1\27\20\0\2\27\5\0\15\27\1\330"+
    "\1\27\1\331\7\27\2\0\25\27\2\0\1\27\20\0"+
    "\2\27\5\0\2\27\1\332\24\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\4\27\1\333\22\27\2\0"+
    "\25\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\14\27\1\334\1\27\1\335\6\27\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\2\27\1\336\22\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\4\27\1\337"+
    "\20\27\2\0\1\27\20\0\2\27\5\0\14\27\1\340"+
    "\12\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\13\27\1\341\13\27\2\0\25\27\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\13\27\1\342\11\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\12\27\1\343"+
    "\12\27\2\0\1\27\20\0\2\27\5\0\1\344\26\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\23\27"+
    "\1\345\3\27\2\0\25\27\2\0\1\27\20\0\2\27"+
    "\5\0\12\27\1\346\14\27\2\0\25\27\2\0\1\27"+
    "\20\0\2\27\5\0\27\27\2\0\1\344\24\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\22\27\1\347"+
    "\2\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\11\27\1\350\13\27\2\0\1\27\20\0\2\27\5\0"+
    "\26\27\1\351\2\0\25\27\2\0\1\27\20\0\2\27"+
    "\5\0\6\27\1\352\20\27\2\0\25\27\2\0\1\27"+
    "\20\0\2\27\5\0\12\27\1\353\14\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\15\27\1\354\11\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\16\27"+
    "\1\355\10\27\2\0\25\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\24\27\1\351\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\6\27\1\356\16\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\11\27\1\353"+
    "\13\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\14\27\1\357\10\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\15\27\1\360\7\27\2\0\1\27\20\0"+
    "\2\27\5\0\10\27\1\361\16\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\22\27\1\362\4\27\2\0"+
    "\25\27\2\0\1\27\20\0\2\27\5\0\15\27\1\363"+
    "\11\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\10\27\1\364\14\27\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\21\27\1\365\3\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\14\27\1\363"+
    "\10\27\2\0\1\27\20\0\2\27\5\0\21\27\1\366"+
    "\5\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\20\27\1\367\4\27\2\0\1\27\20\0"+
    "\2\27\5\0\10\27\1\370\16\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\3\27\1\371\23\27\2\0"+
    "\25\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\10\27\1\372\14\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\3\27\1\373\21\27\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\1\374\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\27\27\2\0\1\375\24\27\2\0"+
    "\1\27\12\173\1\276\4\173\1\3\70\173\20\0\2\27"+
    "\5\0\1\376\26\27\2\0\25\27\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\4\27\1\377\20\27\2\0"+
    "\1\27\20\0\2\27\5\0\4\27\1\u0100\22\27\2\0"+
    "\25\27\2\0\1\27\20\0\2\27\5\0\14\27\1\u0101"+
    "\12\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\4\27\1\u0100\20\27\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\13\27\1\u0101\11\27\2\0"+
    "\1\27\20\0\2\27\5\0\13\27\1\u0102\13\27\2\0"+
    "\25\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\12\27\1\u0103\12\27\2\0\1\27\20\0\2\27\5\0"+
    "\17\27\1\u0104\7\27\2\0\25\27\2\0\1\27\20\0"+
    "\2\27\5\0\1\u0105\26\27\2\0\25\27\2\0\1\27"+
    "\20\0\2\27\5\0\22\27\1\u0106\4\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\16\27\1\u0107\10\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\16\27\1\u0108\6\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\1\u0109\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\21\27\1\u010a\3\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\15\27\1\u010b"+
    "\7\27\2\0\1\27\20\0\2\27\5\0\15\27\1\u010c"+
    "\11\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\12\27\1\u010d\14\27\2\0\25\27\2\0\1\27\20\0"+
    "\2\27\5\0\1\u010e\26\27\2\0\25\27\2\0\1\27"+
    "\20\0\2\27\5\0\27\27\2\0\14\27\1\u010c\10\27"+
    "\2\0\1\27\20\0\2\27\5\0\27\27\2\0\13\27"+
    "\1\u010f\11\27\2\0\1\27\20\0\2\27\5\0\3\27"+
    "\1\u0110\23\27\2\0\25\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\3\27\1\u0111\21\27\2\0\1\27"+
    "\20\0\2\27\5\0\17\27\1\u0112\7\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\10\27\1\u0113\16\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\10\27"+
    "\1\u0114\16\27\2\0\25\27\2\0\1\27\20\0\2\27"+
    "\5\0\14\27\1\u0115\12\27\2\0\25\27\2\0\1\27"+
    "\20\0\2\27\5\0\27\27\2\0\16\27\1\u0116\6\27"+
    "\2\0\1\27\20\0\2\27\5\0\27\27\2\0\10\27"+
    "\1\u0117\14\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\10\27\1\u0118\14\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\13\27\1\u0119\11\27\2\0\1\27"+
    "\20\0\2\27\5\0\21\27\1\u011a\5\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\15\27\1\u011b\11\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\20\27\1\u011c\4\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\14\27\1\u011b\10\27\2\0\1\27"+
    "\20\0\2\27\5\0\1\u011d\26\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\10\27\1\u011e\16\27\2\0"+
    "\25\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\1\u011f\24\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\10\27\1\u0120\14\27\2\0\1\27\20\0\2\27"+
    "\5\0\15\27\1\u0121\11\27\2\0\25\27\2\0\1\27"+
    "\20\0\2\27\5\0\17\27\1\u0122\7\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\4\27\1\u0123\22\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\14\27\1\u0121\10\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\16\27\1\u0124\6\27\2\0\1\27"+
    "\20\0\2\27\5\0\27\27\2\0\4\27\1\u0125\20\27"+
    "\2\0\1\27\20\0\2\27\5\0\3\27\1\u0126\23\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\10\27"+
    "\1\u0127\16\27\2\0\25\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\3\27\1\u0128\21\27\2\0\1\27"+
    "\20\0\2\27\5\0\27\27\2\0\10\27\1\u0129\14\27"+
    "\2\0\1\27\20\0\2\27\5\0\15\27\1\u012a\11\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\14\27\1\u012a\10\27\2\0\1\27\20\0\2\27"+
    "\5\0\15\27\1\u012b\11\27\2\0\25\27\2\0\1\27"+
    "\20\0\2\27\5\0\1\u012c\26\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\14\27\1\u012b"+
    "\10\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\1\u012d\24\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\11\27\1\u010d\13\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\13\27\1\u012e\11\27\2\0\1\27"+
    "\20\0\2\27\5\0\14\27\1\u012f\12\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\27\27\2\0\1\u0130"+
    "\24\27\2\0\1\27\20\0\2\27\5\0\1\u0131\26\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\1\u0132\24\27\2\0\1\27\20\0\2\27\5\0"+
    "\15\27\1\u0133\11\27\2\0\25\27\2\0\1\27\20\0"+
    "\2\27\5\0\3\27\1\u0134\23\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\1\u0135\26\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\21\27\1\u0136\5\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\14\27\1\u0133\10\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\3\27\1\u0137\21\27\2\0\1\27"+
    "\20\0\2\27\5\0\27\27\2\0\1\u0138\24\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\20\27\1\u0139"+
    "\4\27\2\0\1\27\20\0\2\27\5\0\14\27\1\u013a"+
    "\12\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\20\27\1\u013b\4\27\2\0\1\27\20\0"+
    "\2\27\5\0\1\u013c\26\27\2\0\25\27\2\0\1\27"+
    "\20\0\2\27\5\0\27\27\2\0\1\u013c\24\27\2\0"+
    "\1\27\20\0\2\27\5\0\21\27\1\u013d\5\27\2\0"+
    "\25\27\2\0\1\27\20\0\2\27\5\0\13\27\1\u013e"+
    "\13\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\15\27\1\u013f\11\27\2\0\25\27\2\0\1\27\20\0"+
    "\2\27\5\0\21\27\1\u0140\5\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\20\27\1\u0141"+
    "\4\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\12\27\1\u0142\12\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\14\27\1\u013f\10\27\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\20\27\1\u0143\4\27\2\0"+
    "\1\27\20\0\2\27\5\0\17\27\1\u0144\7\27\2\0"+
    "\25\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\16\27\1\u0145\6\27\2\0\1\27\20\0\2\27\5\0"+
    "\3\27\1\u0146\23\27\2\0\25\27\2\0\1\27\20\0"+
    "\2\27\5\0\2\27\1\u0147\24\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\3\27\1\u0148"+
    "\21\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\2\27\1\u0149\22\27\2\0\1\27\20\0\2\27\5\0"+
    "\14\27\1\u014a\12\27\2\0\25\27\2\0\1\27\20\0"+
    "\2\27\5\0\17\27\1\u014b\7\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\13\27\1\u014c"+
    "\11\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\16\27\1\u014b\6\27\2\0\1\27\20\0\2\27\5\0"+
    "\1\u014d\26\27\2\0\25\27\2\0\1\27\20\0\2\27"+
    "\5\0\4\27\1\u014e\22\27\2\0\25\27\2\0\1\27"+
    "\20\0\2\27\5\0\27\27\2\0\1\u014d\24\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\4\27\1\u014f"+
    "\20\27\2\0\1\27\20\0\2\27\5\0\3\27\1\u0150"+
    "\23\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\3\27\1\u0151\21\27\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\20\27\1\u0152\4\27\2\0"+
    "\1\27\20\0\2\27\5\0\15\27\1\u0153\11\27\2\0"+
    "\25\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\13\27\1\u0154\11\27\2\0\1\27\20\0\2\27\5\0"+
    "\12\27\1\u0155\14\27\2\0\25\27\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\11\27\1\u0155\13\27\2\0"+
    "\1\27\20\0\2\27\5\0\1\u0156\26\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\17\27\1\302\7\27"+
    "\2\0\25\27\2\0\1\27\20\0\2\27\5\0\15\27"+
    "\1\u0157\11\27\2\0\25\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\1\u0156\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\16\27\1\302\6\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\14\27\1\u0157"+
    "\10\27\2\0\1\27\20\0\2\27\5\0\21\27\1\u0158"+
    "\5\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\4\27\1\u0159\20\27\2\0\1\27\20\0"+
    "\2\27\5\0\1\u015a\26\27\2\0\25\27\2\0\1\27"+
    "\20\0\2\27\5\0\10\27\1\u015b\16\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\1\u015c\26\27\2\0"+
    "\25\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\1\u015d\24\27\2\0\1\27\20\0\2\27\5\0\27\27"+
    "\2\0\10\27\1\u015e\14\27\2\0\1\27\20\0\2\27"+
    "\5\0\27\27\2\0\1\u015f\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\1\u0160\26\27\2\0\25\27\2\0\1\27"+
    "\20\0\2\27\5\0\27\27\2\0\1\u0161\24\27\2\0"+
    "\1\27\20\0\2\27\5\0\15\27\1\u0162\11\27\2\0"+
    "\25\27\2\0\1\27\20\0\2\27\5\0\15\27\1\u0163"+
    "\11\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\14\27\1\u0162\10\27\2\0\1\27\20\0"+
    "\2\27\5\0\27\27\2\0\14\27\1\u0163\10\27\2\0"+
    "\1\27\20\0\2\27\5\0\1\u0164\26\27\2\0\25\27"+
    "\2\0\1\27\20\0\2\27\5\0\27\27\2\0\1\u0165"+
    "\24\27\2\0\1\27\20\0\2\27\5\0\14\27\1\u0166"+
    "\12\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\13\27\1\u0167\11\27\2\0\1\27\20\0"+
    "\2\27\5\0\4\27\1\u0168\22\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\4\27\1\u0169"+
    "\20\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\4\27\1\u016a\20\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\14\27\1\u0153\10\27\2\0\1\27\20\0"+
    "\2\27\5\0\4\27\1\u016a\22\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\20\27\1\u016a"+
    "\4\27\2\0\1\27\20\0\2\27\5\0\17\27\1\u016b"+
    "\7\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\17\27\1\u016c\7\27\2\0\25\27\2\0\1\27\20\0"+
    "\2\27\5\0\17\27\1\u016d\7\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\16\27\1\u016b"+
    "\6\27\2\0\1\27\20\0\2\27\5\0\27\27\2\0"+
    "\16\27\1\u016c\6\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\16\27\1\u016d\6\27\2\0\1\27\20\0"+
    "\2\27\5\0\20\27\1\u016e\6\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\17\27\1\u016e"+
    "\5\27\2\0\1\27\20\0\2\27\5\0\17\27\1\u016f"+
    "\7\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\16\27\1\u016f\6\27\2\0\1\27\20\0"+
    "\2\27\5\0\21\27\1\u0170\5\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\20\27\1\u0171"+
    "\4\27\2\0\1\27\20\0\2\27\5\0\17\27\1\u0172"+
    "\7\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\16\27\1\u0173\6\27\2\0\1\27\20\0"+
    "\2\27\5\0\4\27\1\u0174\22\27\2\0\25\27\2\0"+
    "\1\27\20\0\2\27\5\0\27\27\2\0\4\27\1\u0174"+
    "\20\27\2\0\1\27\20\0\2\27\5\0\15\27\1\u0175"+
    "\11\27\2\0\25\27\2\0\1\27\20\0\2\27\5\0"+
    "\27\27\2\0\14\27\1\u0175\10\27\2\0\1\27";

  private static int [] zzUnpacktrans() {
    int [] result = new int[22680];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\4\11\1\1\1\11\1\1\1\11"+
    "\3\1\2\11\24\1\2\11\16\1\4\11\1\0\2\11"+
    "\1\0\1\1\1\0\3\11\66\1\2\0\1\11\100\1"+
    "\1\0\267\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
          // fall through
          case 68: break;
          case 2:
            { /*Ignorar*/
            }
          // fall through
          case 69: break;
          case 3:
            { return token(yytext(), "COMILLADOBLE", yyline, yycolumn);
            }
          // fall through
          case 70: break;
          case 4:
            { return token(yytext(), "COMILLASIMPLE", yyline, yycolumn);
            }
          // fall through
          case 71: break;
          case 5:
            { return token(yytext(), "PARENTESISABIERTO", yyline, yycolumn);
            }
          // fall through
          case 72: break;
          case 6:
            { return token(yytext(), "PARENTESISCERRADO", yyline, yycolumn);
            }
          // fall through
          case 73: break;
          case 7:
            { return token(yytext(), "MULTIPLICACION", yyline, yycolumn);
            }
          // fall through
          case 74: break;
          case 8:
            { return token(yytext(), "SUMA", yyline, yycolumn);
            }
          // fall through
          case 75: break;
          case 9:
            { return token(yytext(), "COMA", yyline, yycolumn);
            }
          // fall through
          case 76: break;
          case 10:
            { return token(yytext(), "RESTA", yyline, yycolumn);
            }
          // fall through
          case 77: break;
          case 11:
            { return token(yytext(), "PUNTO", yyline, yycolumn);
            }
          // fall through
          case 78: break;
          case 12:
            { return token(yytext(), "DIVISION", yyline, yycolumn);
            }
          // fall through
          case 79: break;
          case 13:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
          // fall through
          case 80: break;
          case 14:
            { return token(yytext(), "DOSPUNTOS", yyline, yycolumn);
            }
          // fall through
          case 81: break;
          case 15:
            { return token(yytext(), "PUNTOCOMA", yyline, yycolumn);
            }
          // fall through
          case 82: break;
          case 16:
            { return token(yytext(), "MENORQUE", yyline, yycolumn);
            }
          // fall through
          case 83: break;
          case 17:
            { return token(yytext(), "ASIGNACION", yyline, yycolumn);
            }
          // fall through
          case 84: break;
          case 18:
            { return token(yytext(), "MAYORQUE", yyline, yycolumn);
            }
          // fall through
          case 85: break;
          case 19:
            { return token(yytext(), "ID", yyline, yycolumn);
            }
          // fall through
          case 86: break;
          case 20:
            { return token(yytext(), "O", yyline, yycolumn);
            }
          // fall through
          case 87: break;
          case 21:
            { return token(yytext(), "Y", yyline, yycolumn);
            }
          // fall through
          case 88: break;
          case 22:
            { return token(yytext(), "CORCHETEABIERTO", yyline, yycolumn);
            }
          // fall through
          case 89: break;
          case 23:
            { return token(yytext(), "CORCHETECERRADO", yyline, yycolumn);
            }
          // fall through
          case 90: break;
          case 24:
            { return token(yytext(), "LLAVEABIERTO", yyline, yycolumn);
            }
          // fall through
          case 91: break;
          case 25:
            { return token(yytext(), "LLAVECERRADO", yyline, yycolumn);
            }
          // fall through
          case 92: break;
          case 26:
            { return token(yytext(), "DIFERENTE", yyline, yycolumn);
            }
          // fall through
          case 93: break;
          case 27:
            { return token(yytext(), "CADENA", yyline, yycolumn);
            }
          // fall through
          case 94: break;
          case 28:
            { return token(yytext(), "INCREMENTO", yyline, yycolumn);
            }
          // fall through
          case 95: break;
          case 29:
            { return token(yytext(), "DECREMENTO", yyline, yycolumn);
            }
          // fall through
          case 96: break;
          case 30:
            { return token(yytext(), "MENORIGUALQUE", yyline, yycolumn);
            }
          // fall through
          case 97: break;
          case 31:
            { return token(yytext(), "IGUAL", yyline, yycolumn);
            }
          // fall through
          case 98: break;
          case 32:
            { return token(yytext(), "MAYORIGUALQUE", yyline, yycolumn);
            }
          // fall through
          case 99: break;
          case 33:
            { return token(yytext(), "EN", yyline, yycolumn);
            }
          // fall through
          case 100: break;
          case 34:
            { return token(yytext(), "NO", yyline, yycolumn);
            }
          // fall through
          case 101: break;
          case 35:
            { return token(yytext(), "SI", yyline, yycolumn);
            }
          // fall through
          case 102: break;
          case 36:
            { return token(yytext(), "REAL", yyline, yycolumn);
            }
          // fall through
          case 103: break;
          case 37:
            { return token(yytext(), "CASO", yyline, yycolumn);
            }
          // fall through
          case 104: break;
          case 38:
            { return token(yytext(), "PARA", yyline, yycolumn);
            }
          // fall through
          case 105: break;
          case 39:
            { return token(yytext(), "RAIZ", yyline, yycolumn);
            }
          // fall through
          case 106: break;
          case 40:
            { return token(yytext(), "SINO", yyline, yycolumn);
            }
          // fall through
          case 107: break;
          case 41:
            { return token(yytext(), "CLASE", yyline, yycolumn);
            }
          // fall through
          case 108: break;
          case 42:
            { return token(yytext(), "COMUN", yyline, yycolumn);
            }
          // fall through
          case 109: break;
          case 43:
            { return token(yytext(), "FALSO", yyline, yycolumn);
            }
          // fall through
          case 110: break;
          case 44:
            { return token(yytext(), "FINAL", yyline, yycolumn);
            }
          // fall through
          case 111: break;
          case 45:
            { return token(yytext(), "MISMO", yyline, yycolumn);
            }
          // fall through
          case 112: break;
          case 46:
            { return token(yytext(), "RANGO", yyline, yycolumn);
            }
          // fall through
          case 113: break;
          case 47:
            { return token(yytext(), "TEXTO", yyline, yycolumn);
            }
          // fall through
          case 114: break;
          case 48:
            { return token(yytext(), "VACIO", yyline, yycolumn);
            }
          // fall through
          case 115: break;
          case 49:
            { return token(yytext(), "ENTERO", yyline, yycolumn);
            }
          // fall through
          case 116: break;
          case 50:
            { return token(yytext(), "HEREDA", yyline, yycolumn);
            }
          // fall through
          case 117: break;
          case 51:
            { return token(yytext(), "INICIO", yyline, yycolumn);
            }
          // fall through
          case 118: break;
          case 52:
            { return token(yytext(), "ROMPER", yyline, yycolumn);
            }
          // fall through
          case 119: break;
          case 53:
            { return token(yytext(), "SALIDA", yyline, yycolumn);
            }
          // fall through
          case 120: break;
          case 54:
            { return token(yytext(), "BOOLEANO", yyline, yycolumn);
            }
          // fall through
          case 121: break;
          case 55:
            { return token(yytext(), "DECIMAL", yyline, yycolumn);
            }
          // fall through
          case 122: break;
          case 56:
            { return token(yytext(), "ENTRADA", yyline, yycolumn);
            }
          // fall through
          case 123: break;
          case 57:
            { return token(yytext(), "EXCEPTO", yyline, yycolumn);
            }
          // fall through
          case 124: break;
          case 58:
            { return token(yytext(), "PRIVADO", yyline, yycolumn);
            }
          // fall through
          case 125: break;
          case 59:
            { return token(yytext(), "PUBLICO", yyline, yycolumn);
            }
          // fall through
          case 126: break;
          case 60:
            { return token(yytext(), "FLOTANTE", yyline, yycolumn);
            }
          // fall through
          case 127: break;
          case 61:
            { return token(yytext(), "IMPORTAR", yyline, yycolumn);
            }
          // fall through
          case 128: break;
          case 62:
            { return token(yytext(), "IMPRIMIR", yyline, yycolumn);
            }
          // fall through
          case 129: break;
          case 63:
            { return token(yytext(), "INTENTAR", yyline, yycolumn);
            }
          // fall through
          case 130: break;
          case 64:
            { return token(yytext(), "MIENTRAS", yyline, yycolumn);
            }
          // fall through
          case 131: break;
          case 65:
            { return token(yytext(), "RETORNAR", yyline, yycolumn);
            }
          // fall through
          case 132: break;
          case 66:
            { return token(yytext(), "SIGUIENTE", yyline, yycolumn);
            }
          // fall through
          case 133: break;
          case 67:
            { return token(yytext(), "VERDADERO", yyline, yycolumn);
            }
          // fall through
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
