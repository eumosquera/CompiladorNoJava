// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


@SuppressWarnings("fallthrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\2\0\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\11\22"+
    "\1\23\1\24\1\25\1\26\1\27\2\0\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\2\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\41\1\47\1\50"+
    "\1\51\1\52\1\53\1\41\1\54\1\55\1\56\1\57"+
    "\1\0\1\60\1\0\1\41\1\0\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\2\41\1\72"+
    "\1\73\1\74\1\75\1\76\1\41\1\77\1\100\1\101"+
    "\1\102\1\103\1\41\1\104\1\55\1\105\1\106\1\107"+
    "\1\110\7\0\1\3\73\0\1\111\7\0\1\111\3\0"+
    "\1\111\3\0\1\111\1\0\1\111\6\0\1\111\1\0"+
    "\1\111\4\0\1\111\7\0\1\111\3\0\1\111\3\0"+
    "\1\111\1\0\1\111\6\0\1\111\1\0\1\111\u012b\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
    "\1\17\1\20\1\21\1\22\1\23\12\24\1\25\5\24"+
    "\1\26\1\27\1\30\16\24\1\31\1\1\1\32\1\33"+
    "\1\34\1\0\1\35\1\36\1\0\1\2\1\0\1\37"+
    "\1\40\1\41\12\24\1\42\3\24\1\42\20\24\1\43"+
    "\15\24\1\44\1\24\1\44\10\24\1\25\2\0\2\45"+
    "\101\24\1\0\1\2\2\24\1\46\43\24\1\47\6\24"+
    "\1\50\1\24\1\45\7\24\1\51\14\24\1\52\1\53"+
    "\14\24\1\54\1\55\15\24\1\56\7\24\1\57\10\24"+
    "\1\60\1\61\7\24\1\62\12\24\1\63\2\24\1\64"+
    "\15\24\1\65\1\24\1\66\5\24\1\67\1\24\1\70"+
    "\1\71\1\24\1\72\14\24\1\73\1\74\7\24\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\2\24\1\103\4\24"+
    "\1\104\1\105\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\112\0\224\0\336\0\u0128\0\112\0\112"+
    "\0\112\0\112\0\112\0\u0172\0\112\0\u01bc\0\112\0\u0206"+
    "\0\u0250\0\u029a\0\112\0\112\0\u02e4\0\u032e\0\u0378\0\u03c2"+
    "\0\u040c\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612"+
    "\0\u065c\0\u03c2\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u03c2"+
    "\0\112\0\112\0\u0818\0\u0862\0\u08ac\0\u08f6\0\u0940\0\u098a"+
    "\0\u09d4\0\u0a1e\0\u0a68\0\u0ab2\0\u0afc\0\u0b46\0\u0b90\0\u0bda"+
    "\0\112\0\u0c24\0\112\0\112\0\112\0\u0128\0\112\0\112"+
    "\0\u0c6e\0\u0cb8\0\u0d02\0\112\0\112\0\112\0\u0d4c\0\u0d96"+
    "\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c\0\u0fe6"+
    "\0\u1030\0\u107a\0\u10c4\0\u110e\0\u1158\0\u11a2\0\u11ec\0\u1236"+
    "\0\u1280\0\u12ca\0\u1314\0\u135e\0\u13a8\0\u13f2\0\u143c\0\u1486"+
    "\0\u14d0\0\u151a\0\u1564\0\u15ae\0\u15f8\0\u03c2\0\u1642\0\u168c"+
    "\0\u16d6\0\u1720\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u1892\0\u18dc"+
    "\0\u1926\0\u1970\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c"+
    "\0\u1b76\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\112\0\u1d32"+
    "\0\u1d7c\0\112\0\u1dc6\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38"+
    "\0\u1f82\0\u1fcc\0\u2016\0\u2060\0\u20aa\0\u20f4\0\u213e\0\u2188"+
    "\0\u21d2\0\u221c\0\u2266\0\u22b0\0\u22fa\0\u2344\0\u238e\0\u23d8"+
    "\0\u2422\0\u246c\0\u24b6\0\u2500\0\u254a\0\u2594\0\u25de\0\u2628"+
    "\0\u2672\0\u26bc\0\u2706\0\u2750\0\u279a\0\u27e4\0\u282e\0\u2878"+
    "\0\u28c2\0\u290c\0\u2956\0\u29a0\0\u29ea\0\u2a34\0\u2a7e\0\u2ac8"+
    "\0\u2b12\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84\0\u2cce\0\u2d18"+
    "\0\u2d62\0\u2dac\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68"+
    "\0\u2fb2\0\u2ffc\0\u3046\0\u3090\0\u30da\0\u1d32\0\u3124\0\u316e"+
    "\0\u03c2\0\u31b8\0\u3202\0\u324c\0\u3296\0\u32e0\0\u332a\0\u3374"+
    "\0\u33be\0\u3408\0\u3452\0\u349c\0\u34e6\0\u3530\0\u357a\0\u35c4"+
    "\0\u360e\0\u3658\0\u36a2\0\u36ec\0\u3736\0\u3780\0\u37ca\0\u3814"+
    "\0\u385e\0\u38a8\0\u38f2\0\u393c\0\u3986\0\u39d0\0\u3a1a\0\u3a64"+
    "\0\u3aae\0\u3af8\0\u3b42\0\u3b8c\0\u03c2\0\u3bd6\0\u3c20\0\u3c6a"+
    "\0\u3cb4\0\u3cfe\0\u3d48\0\u03c2\0\u3d92\0\u03c2\0\u3ddc\0\u3e26"+
    "\0\u3e70\0\u3eba\0\u3f04\0\u3f4e\0\u3f98\0\u03c2\0\u3fe2\0\u402c"+
    "\0\u4076\0\u40c0\0\u410a\0\u4154\0\u419e\0\u41e8\0\u4232\0\u427c"+
    "\0\u42c6\0\u4310\0\u03c2\0\u03c2\0\u435a\0\u43a4\0\u43ee\0\u4438"+
    "\0\u4482\0\u44cc\0\u4516\0\u4560\0\u45aa\0\u45f4\0\u463e\0\u4688"+
    "\0\u03c2\0\u03c2\0\u46d2\0\u471c\0\u4766\0\u47b0\0\u47fa\0\u4844"+
    "\0\u488e\0\u48d8\0\u4922\0\u496c\0\u49b6\0\u4a00\0\u4a4a\0\u03c2"+
    "\0\u4a94\0\u4ade\0\u4b28\0\u4b72\0\u4bbc\0\u4c06\0\u4c50\0\u03c2"+
    "\0\u4c9a\0\u4ce4\0\u4d2e\0\u4d78\0\u4dc2\0\u4e0c\0\u4e56\0\u4ea0"+
    "\0\u03c2\0\u03c2\0\u4eea\0\u4f34\0\u4f7e\0\u4fc8\0\u5012\0\u505c"+
    "\0\u50a6\0\u03c2\0\u50f0\0\u513a\0\u5184\0\u51ce\0\u5218\0\u5262"+
    "\0\u52ac\0\u52f6\0\u5340\0\u538a\0\u03c2\0\u53d4\0\u541e\0\u03c2"+
    "\0\u5468\0\u54b2\0\u54fc\0\u5546\0\u5590\0\u55da\0\u5624\0\u566e"+
    "\0\u56b8\0\u5702\0\u574c\0\u5796\0\u57e0\0\u03c2\0\u582a\0\u03c2"+
    "\0\u5874\0\u58be\0\u5908\0\u5952\0\u599c\0\u03c2\0\u59e6\0\u03c2"+
    "\0\u03c2\0\u5a30\0\u03c2\0\u5a7a\0\u5ac4\0\u5b0e\0\u5b58\0\u5ba2"+
    "\0\u5bec\0\u5c36\0\u5c80\0\u5cca\0\u5d14\0\u5d5e\0\u5da8\0\u03c2"+
    "\0\u03c2\0\u5df2\0\u5e3c\0\u5e86\0\u5ed0\0\u5f1a\0\u5f64\0\u5fae"+
    "\0\u03c2\0\u03c2\0\u03c2\0\u03c2\0\u03c2\0\u03c2\0\u5ff8\0\u6042"+
    "\0\u03c2\0\u608c\0\u60d6\0\u6120\0\u616a\0\u03c2\0\u03c2\0\u03c2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\30\1\36\1\37"+
    "\2\30\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\30\1\47\1\30\1\50\1\30\1\51\1\52\1\30"+
    "\1\53\1\54\1\55\1\56\1\57\1\30\1\60\1\61"+
    "\1\30\1\62\1\63\1\42\1\64\1\65\1\66\1\67"+
    "\1\30\1\70\2\30\1\71\1\72\1\73\1\30\114\0"+
    "\1\3\135\0\1\74\71\0\1\75\7\0\2\76\1\0"+
    "\2\76\5\0\27\76\2\0\25\76\20\0\1\77\113\0"+
    "\1\100\106\0\1\101\4\0\1\102\110\0\1\103\111\0"+
    "\1\103\1\0\2\22\115\0\1\104\111\0\1\105\111\0"+
    "\1\106\104\0\2\30\5\0\27\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\15\30\1\107\11\30\2\0"+
    "\14\30\1\110\10\30\3\0\1\30\21\0\2\30\5\0"+
    "\1\111\11\30\1\112\2\30\1\113\11\30\2\0\1\114"+
    "\10\30\1\115\2\30\1\116\10\30\3\0\1\30\21\0"+
    "\2\30\5\0\4\30\1\117\22\30\2\0\4\30\1\120"+
    "\20\30\3\0\1\30\21\0\2\30\5\0\14\30\1\121"+
    "\3\30\1\122\2\30\1\123\1\124\2\30\2\0\13\30"+
    "\1\125\3\30\1\126\2\30\1\127\1\130\1\30\3\0"+
    "\1\30\21\0\2\30\5\0\1\131\7\30\1\132\1\30"+
    "\1\133\14\30\2\0\1\134\13\30\1\135\10\30\3\0"+
    "\1\30\21\0\2\30\5\0\4\30\1\136\22\30\2\0"+
    "\4\30\1\137\20\30\3\0\1\30\21\0\2\30\5\0"+
    "\13\30\1\140\1\141\12\30\2\0\12\30\1\142\1\143"+
    "\11\30\3\0\1\30\21\0\2\30\5\0\10\30\1\144"+
    "\16\30\2\0\10\30\1\145\14\30\3\0\1\30\21\0"+
    "\2\30\5\0\15\30\1\146\11\30\2\0\14\30\1\146"+
    "\10\30\3\0\1\30\21\0\2\30\5\0\1\147\16\30"+
    "\1\150\2\30\1\151\4\30\2\0\1\152\15\30\1\153"+
    "\2\30\1\154\3\30\3\0\1\30\21\0\2\30\5\0"+
    "\1\155\3\30\1\156\10\30\1\157\11\30\2\0\1\160"+
    "\3\30\1\161\7\30\1\162\10\30\3\0\1\30\21\0"+
    "\2\30\5\0\1\163\7\30\1\164\16\30\2\0\1\165"+
    "\7\30\1\166\14\30\3\0\1\30\21\0\2\30\5\0"+
    "\4\30\1\167\22\30\2\0\4\30\1\170\20\30\3\0"+
    "\1\30\21\0\2\30\5\0\1\171\3\30\1\172\22\30"+
    "\2\0\1\173\3\30\1\174\20\30\3\0\1\30\21\0"+
    "\2\30\5\0\27\30\2\0\14\30\1\110\10\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\1\114\10\30"+
    "\1\115\2\30\1\116\10\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\4\30\1\120\20\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\13\30\1\125\3\30"+
    "\1\126\2\30\1\127\1\130\1\30\3\0\1\30\21\0"+
    "\2\30\5\0\27\30\2\0\1\134\7\30\1\175\3\30"+
    "\1\176\10\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\4\30\1\137\20\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\12\30\1\142\1\143\11\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\10\30\1\145"+
    "\14\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\14\30\1\146\10\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\1\152\15\30\1\153\2\30\1\154\3\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\1\160"+
    "\3\30\1\161\7\30\1\162\10\30\3\0\1\30\21\0"+
    "\2\30\5\0\27\30\2\0\1\165\7\30\1\166\14\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\4\30"+
    "\1\170\20\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\1\173\3\30\1\174\20\30\3\0\1\30\107\0"+
    "\1\177\2\0\13\200\1\201\76\200\2\102\1\3\1\102"+
    "\1\4\105\102\21\0\1\202\1\203\110\0\2\30\5\0"+
    "\12\30\1\204\14\30\2\0\25\30\3\0\1\30\21\0"+
    "\2\30\5\0\27\30\2\0\14\30\1\205\10\30\3\0"+
    "\1\30\21\0\2\30\5\0\20\30\1\206\6\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\1\207\26\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\13\30"+
    "\1\210\13\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\17\30\1\211\5\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\1\212\24\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\12\30\1\213"+
    "\12\30\3\0\1\30\21\0\2\30\5\0\2\30\1\214"+
    "\24\30\2\0\25\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\2\30\1\215\22\30\3\0\1\30\21\0"+
    "\2\30\5\0\21\30\1\216\5\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\21\30\1\217\5\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\1\220\26\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\2\30"+
    "\1\221\24\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\20\30\1\222\4\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\20\30\1\223\4\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\1\224"+
    "\24\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\2\30\1\225\22\30\3\0\1\30\21\0\2\30\5\0"+
    "\12\30\1\226\14\30\2\0\25\30\3\0\1\30\21\0"+
    "\2\30\5\0\14\30\1\227\12\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\15\30\1\230\11\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\11\30\1\231\13\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\20\30\1\232\4\30\3\0\1\30\21\0"+
    "\2\30\5\0\17\30\1\233\7\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\16\30\1\234"+
    "\6\30\3\0\1\30\21\0\2\30\5\0\16\30\1\235"+
    "\10\30\2\0\25\30\3\0\1\30\21\0\2\30\5\0"+
    "\10\30\1\236\10\30\1\237\5\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\15\30\1\240"+
    "\7\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\10\30\1\241\7\30\1\242\4\30\3\0\1\30\21\0"+
    "\2\30\5\0\4\30\1\243\13\30\1\244\6\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\4\30\1\245\12\30\1\246\5\30\3\0\1\30\21\0"+
    "\2\30\5\0\17\30\1\247\7\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\10\30\1\250\16\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\1\30\1\251"+
    "\25\30\2\0\25\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\16\30\1\252\6\30\3\0\1\30\21\0"+
    "\2\30\5\0\27\30\2\0\10\30\1\253\14\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\1\30\1\254"+
    "\23\30\3\0\1\30\21\0\2\30\5\0\10\30\1\255"+
    "\3\30\1\256\12\30\2\0\25\30\3\0\1\30\21\0"+
    "\2\30\5\0\1\257\20\30\1\260\5\30\2\0\25\30"+
    "\3\0\1\30\21\0\2\30\5\0\13\30\1\261\13\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\10\30\1\262\2\30\1\263\11\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\1\264\17\30\1\265"+
    "\4\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\12\30\1\266\12\30\3\0\1\30\21\0\2\30\5\0"+
    "\12\30\1\267\14\30\2\0\25\30\3\0\1\30\21\0"+
    "\2\30\5\0\6\30\1\270\5\30\1\271\12\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\11\30\1\272\13\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\6\30\1\273\4\30\1\274\11\30\3\0"+
    "\1\30\21\0\2\30\5\0\24\30\1\275\2\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\23\30\1\276\1\30\3\0\1\30\21\0\2\30\5\0"+
    "\2\30\1\277\24\30\2\0\25\30\3\0\1\30\21\0"+
    "\2\30\5\0\17\30\1\300\7\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\2\30\1\301"+
    "\22\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\16\30\1\302\6\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\13\30\1\303\11\30\3\0\1\30\21\0"+
    "\2\30\5\0\27\30\2\0\20\30\1\304\4\30\3\0"+
    "\1\30\13\200\1\305\111\200\1\305\4\200\1\306\71\200"+
    "\21\0\2\203\110\0\2\30\5\0\4\30\1\307\22\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\11\30\1\310\13\30\3\0\1\30\21\0\2\30"+
    "\5\0\15\30\1\311\11\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\20\30\1\312\6\30\2\0\25\30"+
    "\3\0\1\30\21\0\2\30\5\0\22\30\1\313\4\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\14\30\1\311\10\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\17\30\1\314\5\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\21\30\1\315\3\30"+
    "\3\0\1\30\21\0\2\30\5\0\10\30\1\316\16\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\10\30\1\317\14\30\3\0\1\30\21\0\2\30"+
    "\5\0\4\30\1\320\12\30\1\321\7\30\2\0\25\30"+
    "\3\0\1\30\21\0\2\30\5\0\1\322\26\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\12\30\1\323"+
    "\14\30\2\0\25\30\3\0\1\30\21\0\2\30\5\0"+
    "\4\30\1\324\22\30\2\0\25\30\3\0\1\30\21\0"+
    "\2\30\5\0\27\30\2\0\4\30\1\325\11\30\1\326"+
    "\6\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\1\327\24\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\11\30\1\330\13\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\4\30\1\331\20\30\3\0\1\30"+
    "\21\0\2\30\5\0\20\30\1\332\6\30\2\0\25\30"+
    "\3\0\1\30\21\0\2\30\5\0\1\333\26\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\21\30\1\334"+
    "\5\30\2\0\25\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\17\30\1\335\5\30\3\0\1\30\21\0"+
    "\2\30\5\0\27\30\2\0\1\336\24\30\3\0\1\30"+
    "\21\0\2\30\5\0\4\30\1\337\22\30\2\0\25\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\4\30"+
    "\1\340\20\30\3\0\1\30\21\0\2\30\5\0\15\30"+
    "\1\341\1\30\1\342\7\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\2\30\1\343\24\30\2\0\25\30"+
    "\3\0\1\30\21\0\2\30\5\0\4\30\1\344\22\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\14\30\1\345\1\30\1\346\6\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\2\30\1\347\22\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\4\30"+
    "\1\350\20\30\3\0\1\30\21\0\2\30\5\0\14\30"+
    "\1\351\12\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\13\30\1\352\13\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\13\30\1\353\11\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\12\30"+
    "\1\354\12\30\3\0\1\30\21\0\2\30\5\0\1\355"+
    "\26\30\2\0\25\30\3\0\1\30\21\0\2\30\5\0"+
    "\14\30\1\356\6\30\1\357\3\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\12\30\1\360\14\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\1\355\24\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\13\30\1\361\6\30\1\362\2\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\11\30\1\363\13\30"+
    "\3\0\1\30\21\0\2\30\5\0\26\30\1\364\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\6\30\1\365"+
    "\20\30\2\0\25\30\3\0\1\30\21\0\2\30\5\0"+
    "\12\30\1\366\14\30\2\0\25\30\3\0\1\30\21\0"+
    "\2\30\5\0\15\30\1\367\11\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\16\30\1\370\10\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\24\30\1\364\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\6\30\1\371\16\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\11\30\1\366\13\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\14\30\1\372\10\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\15\30"+
    "\1\373\7\30\3\0\1\30\21\0\2\30\5\0\10\30"+
    "\1\374\16\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\22\30\1\375\4\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\15\30\1\376\11\30\2\0\25\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\10\30"+
    "\1\377\14\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\21\30\1\u0100\3\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\14\30\1\376\10\30\3\0\1\30"+
    "\21\0\2\30\5\0\21\30\1\u0101\5\30\2\0\25\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\20\30"+
    "\1\u0102\4\30\3\0\1\30\21\0\2\30\5\0\10\30"+
    "\1\u0103\16\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\3\30\1\u0104\23\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\10\30\1\u0105\14\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\3\30"+
    "\1\u0106\21\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\1\u0107\24\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\1\u0108\24\30\3\0\1\30\13\200\1\305"+
    "\4\200\1\3\71\200\21\0\2\30\5\0\1\u0109\26\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\4\30\1\u010a\20\30\3\0\1\30\21\0\2\30"+
    "\5\0\4\30\1\u010b\22\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\14\30\1\u010c\12\30\2\0\25\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\4\30"+
    "\1\u010b\20\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\13\30\1\u010c\11\30\3\0\1\30\21\0\2\30"+
    "\5\0\13\30\1\u010d\13\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\12\30\1\u010e\12\30"+
    "\3\0\1\30\21\0\2\30\5\0\17\30\1\u010f\7\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\1\u0110"+
    "\26\30\2\0\25\30\3\0\1\30\21\0\2\30\5\0"+
    "\21\30\1\u0111\5\30\2\0\25\30\3\0\1\30\21\0"+
    "\2\30\5\0\22\30\1\u0112\4\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\16\30\1\u0113\10\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\16\30\1\u0114\6\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\1\u0115\24\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\20\30\1\u0116\4\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\21\30\1\u0117\3\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\15\30"+
    "\1\u0118\7\30\3\0\1\30\21\0\2\30\5\0\15\30"+
    "\1\u0119\11\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\12\30\1\u011a\14\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\1\u011b\26\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\14\30\1\u0119"+
    "\10\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\13\30\1\u011c\11\30\3\0\1\30\21\0\2\30\5\0"+
    "\3\30\1\u011d\23\30\2\0\25\30\3\0\1\30\21\0"+
    "\2\30\5\0\27\30\2\0\3\30\1\u011e\21\30\3\0"+
    "\1\30\21\0\2\30\5\0\17\30\1\u011f\7\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\10\30\1\u0120"+
    "\16\30\2\0\25\30\3\0\1\30\21\0\2\30\5\0"+
    "\10\30\1\u0121\16\30\2\0\25\30\3\0\1\30\21\0"+
    "\2\30\5\0\14\30\1\u0122\12\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\16\30\1\u0123"+
    "\6\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\10\30\1\u0124\14\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\10\30\1\u0125\14\30\3\0\1\30\21\0"+
    "\2\30\5\0\27\30\2\0\13\30\1\u0126\11\30\3\0"+
    "\1\30\21\0\2\30\5\0\21\30\1\u0127\5\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\15\30\1\u0128"+
    "\11\30\2\0\25\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\20\30\1\u0129\4\30\3\0\1\30\21\0"+
    "\2\30\5\0\27\30\2\0\14\30\1\u0128\10\30\3\0"+
    "\1\30\21\0\2\30\5\0\2\30\1\u012a\24\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\1\u012b\26\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\10\30"+
    "\1\u012c\16\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\2\30\1\u012d\22\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\1\u012e\24\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\10\30\1\u012f"+
    "\14\30\3\0\1\30\21\0\2\30\5\0\15\30\1\u0130"+
    "\11\30\2\0\25\30\3\0\1\30\21\0\2\30\5\0"+
    "\17\30\1\u0131\7\30\2\0\25\30\3\0\1\30\21\0"+
    "\2\30\5\0\4\30\1\u0132\22\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\14\30\1\u0130"+
    "\10\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\16\30\1\u0133\6\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\4\30\1\u0134\20\30\3\0\1\30\21\0"+
    "\2\30\5\0\3\30\1\u0135\23\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\10\30\1\u0136\16\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\3\30\1\u0137\21\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\10\30\1\u0138\14\30\3\0\1\30\21\0"+
    "\2\30\5\0\15\30\1\u0139\11\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\14\30\1\u0139"+
    "\10\30\3\0\1\30\21\0\2\30\5\0\15\30\1\u013a"+
    "\11\30\2\0\25\30\3\0\1\30\21\0\2\30\5\0"+
    "\1\u013b\26\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\14\30\1\u013a\10\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\1\u013c\24\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\11\30\1\u011a"+
    "\13\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\13\30\1\u013d\11\30\3\0\1\30\21\0\2\30\5\0"+
    "\14\30\1\u013e\12\30\2\0\25\30\3\0\1\30\21\0"+
    "\2\30\5\0\27\30\2\0\1\u013f\24\30\3\0\1\30"+
    "\21\0\2\30\5\0\1\u0140\26\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\1\u0141\24\30"+
    "\3\0\1\30\21\0\2\30\5\0\15\30\1\u0142\11\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\3\30"+
    "\1\u0143\23\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\10\30\1\u0144\16\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\1\u0145\26\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\21\30\1\u0146\5\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\27\30\2\0"+
    "\14\30\1\u0142\10\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\3\30\1\u0147\21\30\3\0\1\30\21\0"+
    "\2\30\5\0\27\30\2\0\10\30\1\u0148\14\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\1\u0149\24\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\20\30"+
    "\1\u014a\4\30\3\0\1\30\21\0\2\30\5\0\14\30"+
    "\1\u014b\12\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\20\30\1\u014c\4\30\3\0\1\30"+
    "\21\0\2\30\5\0\1\u014d\26\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\1\u014d\24\30"+
    "\3\0\1\30\21\0\2\30\5\0\21\30\1\u014e\5\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\13\30"+
    "\1\u014f\13\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\15\30\1\u0150\11\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\21\30\1\u0151\5\30\2\0\25\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\20\30"+
    "\1\u0152\4\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\12\30\1\u0153\12\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\14\30\1\u0150\10\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\20\30\1\u0154\4\30"+
    "\3\0\1\30\21\0\2\30\5\0\17\30\1\u0155\7\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\16\30\1\u0156\6\30\3\0\1\30\21\0\2\30"+
    "\5\0\10\30\1\u0157\16\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\3\30\1\u0158\23\30\2\0\25\30"+
    "\3\0\1\30\21\0\2\30\5\0\2\30\1\u0159\24\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\10\30\1\u015a\14\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\3\30\1\u015b\21\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\2\30\1\u015c\22\30"+
    "\3\0\1\30\21\0\2\30\5\0\14\30\1\u015d\12\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\17\30"+
    "\1\u015e\7\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\13\30\1\u015f\11\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\16\30\1\u015e\6\30"+
    "\3\0\1\30\21\0\2\30\5\0\1\u0160\26\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\4\30\1\u0161"+
    "\22\30\2\0\25\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\1\u0160\24\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\4\30\1\u0162\20\30\3\0\1\30"+
    "\21\0\2\30\5\0\3\30\1\u0163\23\30\2\0\25\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\3\30"+
    "\1\u0164\21\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\20\30\1\u0165\4\30\3\0\1\30\21\0\2\30"+
    "\5\0\15\30\1\u0166\11\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\13\30\1\u0167\11\30"+
    "\3\0\1\30\21\0\2\30\5\0\12\30\1\u0168\14\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\11\30\1\u0168\13\30\3\0\1\30\21\0\2\30"+
    "\5\0\1\u0169\26\30\2\0\25\30\3\0\1\30\21\0"+
    "\2\30\5\0\2\30\1\u016a\24\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\17\30\1\311\7\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\15\30\1\u016b"+
    "\11\30\2\0\25\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\1\u0169\24\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\2\30\1\u016c\22\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\16\30\1\311\6\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\14\30"+
    "\1\u016b\10\30\3\0\1\30\21\0\2\30\5\0\21\30"+
    "\1\u016d\5\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\4\30\1\u016e\20\30\3\0\1\30"+
    "\21\0\2\30\5\0\1\u016f\26\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\10\30\1\u0170\16\30\2\0"+
    "\25\30\3\0\1\30\21\0\2\30\5\0\1\u0171\26\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\1\u0172\24\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\10\30\1\u0173\14\30\3\0\1\30\21\0"+
    "\2\30\5\0\27\30\2\0\1\u0174\24\30\3\0\1\30"+
    "\21\0\2\30\5\0\1\u0175\26\30\2\0\25\30\3\0"+
    "\1\30\21\0\2\30\5\0\27\30\2\0\1\u0176\24\30"+
    "\3\0\1\30\21\0\2\30\5\0\16\30\1\u0177\10\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\15\30"+
    "\1\u0178\11\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\15\30\1\u0179\11\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\15\30\1\u017a\7\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\14\30"+
    "\1\u0178\10\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\14\30\1\u0179\10\30\3\0\1\30\21\0\2\30"+
    "\5\0\1\u017b\26\30\2\0\25\30\3\0\1\30\21\0"+
    "\2\30\5\0\27\30\2\0\1\u017c\24\30\3\0\1\30"+
    "\21\0\2\30\5\0\14\30\1\u017d\12\30\2\0\25\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\13\30"+
    "\1\u017e\11\30\3\0\1\30\21\0\2\30\5\0\4\30"+
    "\1\u017f\22\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\4\30\1\u0180\20\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\4\30\1\u0181\20\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\14\30"+
    "\1\u0166\10\30\3\0\1\30\21\0\2\30\5\0\15\30"+
    "\1\u0182\11\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\14\30\1\u0182\10\30\3\0\1\30"+
    "\21\0\2\30\5\0\4\30\1\u0181\22\30\2\0\25\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\20\30"+
    "\1\u0181\4\30\3\0\1\30\21\0\2\30\5\0\17\30"+
    "\1\u0183\7\30\2\0\25\30\3\0\1\30\21\0\2\30"+
    "\5\0\17\30\1\u0184\7\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\17\30\1\u0185\7\30\2\0\25\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\16\30"+
    "\1\u0183\6\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\16\30\1\u0184\6\30\3\0\1\30\21\0\2\30"+
    "\5\0\27\30\2\0\16\30\1\u0185\6\30\3\0\1\30"+
    "\21\0\2\30\5\0\20\30\1\u0186\6\30\2\0\25\30"+
    "\3\0\1\30\21\0\2\30\5\0\27\30\2\0\17\30"+
    "\1\u0186\5\30\3\0\1\30\21\0\2\30\5\0\1\u0187"+
    "\26\30\2\0\25\30\3\0\1\30\21\0\2\30\5\0"+
    "\27\30\2\0\1\u0188\24\30\3\0\1\30\21\0\2\30"+
    "\5\0\17\30\1\u0189\7\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\16\30\1\u0189\6\30"+
    "\3\0\1\30\21\0\2\30\5\0\21\30\1\u018a\5\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\20\30\1\u018b\4\30\3\0\1\30\21\0\2\30"+
    "\5\0\17\30\1\u018c\7\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\16\30\1\u018d\6\30"+
    "\3\0\1\30\21\0\2\30\5\0\12\30\1\u018e\14\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\11\30\1\u018e\13\30\3\0\1\30\21\0\2\30"+
    "\5\0\4\30\1\u018f\22\30\2\0\25\30\3\0\1\30"+
    "\21\0\2\30\5\0\27\30\2\0\4\30\1\u018f\20\30"+
    "\3\0\1\30\21\0\2\30\5\0\15\30\1\u0190\11\30"+
    "\2\0\25\30\3\0\1\30\21\0\2\30\5\0\27\30"+
    "\2\0\14\30\1\u0190\10\30\3\0\1\30";

  private static int [] zzUnpacktrans() {
    int [] result = new int[25012];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\5\11\1\1\1\11\1\1\1\11"+
    "\3\1\2\11\24\1\2\11\16\1\1\11\1\1\3\11"+
    "\1\0\2\11\1\0\1\1\1\0\3\11\70\1\1\11"+
    "\2\0\1\11\102\1\1\0\313\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
          // fall through
          case 71: break;
          case 2:
            { /*Ignorar*/
            }
          // fall through
          case 72: break;
          case 3:
            { return token(yytext(), "COMILLADOBLE", yyline, yycolumn);
            }
          // fall through
          case 73: break;
          case 4:
            { return token(yytext(), "MODULO", yyline, yycolumn);
            }
          // fall through
          case 74: break;
          case 5:
            { return token(yytext(), "COMILLASIMPLE", yyline, yycolumn);
            }
          // fall through
          case 75: break;
          case 6:
            { return token(yytext(), "PARENTESISABIERTO", yyline, yycolumn);
            }
          // fall through
          case 76: break;
          case 7:
            { return token(yytext(), "PARENTESISCERRADO", yyline, yycolumn);
            }
          // fall through
          case 77: break;
          case 8:
            { return token(yytext(), "MULTIPLICACION", yyline, yycolumn);
            }
          // fall through
          case 78: break;
          case 9:
            { return token(yytext(), "SUMA", yyline, yycolumn);
            }
          // fall through
          case 79: break;
          case 10:
            { return token(yytext(), "COMA", yyline, yycolumn);
            }
          // fall through
          case 80: break;
          case 11:
            { return token(yytext(), "RESTA", yyline, yycolumn);
            }
          // fall through
          case 81: break;
          case 12:
            { return token(yytext(), "PUNTO", yyline, yycolumn);
            }
          // fall through
          case 82: break;
          case 13:
            { return token(yytext(), "DIVISION", yyline, yycolumn);
            }
          // fall through
          case 83: break;
          case 14:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
          // fall through
          case 84: break;
          case 15:
            { return token(yytext(), "DOSPUNTOS", yyline, yycolumn);
            }
          // fall through
          case 85: break;
          case 16:
            { return token(yytext(), "PUNTOCOMA", yyline, yycolumn);
            }
          // fall through
          case 86: break;
          case 17:
            { return token(yytext(), "MENORQUE", yyline, yycolumn);
            }
          // fall through
          case 87: break;
          case 18:
            { return token(yytext(), "ASIGNACION", yyline, yycolumn);
            }
          // fall through
          case 88: break;
          case 19:
            { return token(yytext(), "MAYORQUE", yyline, yycolumn);
            }
          // fall through
          case 89: break;
          case 20:
            { return token(yytext(), "ID", yyline, yycolumn);
            }
          // fall through
          case 90: break;
          case 21:
            { return token(yytext(), "O", yyline, yycolumn);
            }
          // fall through
          case 91: break;
          case 22:
            { return token(yytext(), "Y", yyline, yycolumn);
            }
          // fall through
          case 92: break;
          case 23:
            { return token(yytext(), "CORCHETEABIERTO", yyline, yycolumn);
            }
          // fall through
          case 93: break;
          case 24:
            { return token(yytext(), "CORCHETECERRADO", yyline, yycolumn);
            }
          // fall through
          case 94: break;
          case 25:
            { return token(yytext(), "LLAVEABIERTO", yyline, yycolumn);
            }
          // fall through
          case 95: break;
          case 26:
            { return token(yytext(), "LLAVECERRADO", yyline, yycolumn);
            }
          // fall through
          case 96: break;
          case 27:
            { return token(yytext(), "DIFERENTE", yyline, yycolumn);
            }
          // fall through
          case 97: break;
          case 28:
            { return token(yytext(), "CADENA", yyline, yycolumn);
            }
          // fall through
          case 98: break;
          case 29:
            { return token(yytext(), "INCREMENTO", yyline, yycolumn);
            }
          // fall through
          case 99: break;
          case 30:
            { return token(yytext(), "DECREMENTO", yyline, yycolumn);
            }
          // fall through
          case 100: break;
          case 31:
            { return token(yytext(), "MENORIGUALQUE", yyline, yycolumn);
            }
          // fall through
          case 101: break;
          case 32:
            { return token(yytext(), "IGUAL", yyline, yycolumn);
            }
          // fall through
          case 102: break;
          case 33:
            { return token(yytext(), "MAYORIGUALQUE", yyline, yycolumn);
            }
          // fall through
          case 103: break;
          case 34:
            { return token(yytext(), "EN", yyline, yycolumn);
            }
          // fall through
          case 104: break;
          case 35:
            { return token(yytext(), "NO", yyline, yycolumn);
            }
          // fall through
          case 105: break;
          case 36:
            { return token(yytext(), "SI", yyline, yycolumn);
            }
          // fall through
          case 106: break;
          case 37:
            { return token(yytext(), "REAL", yyline, yycolumn);
            }
          // fall through
          case 107: break;
          case 38:
            { return token(yytext(), "CASO", yyline, yycolumn);
            }
          // fall through
          case 108: break;
          case 39:
            { return token(yytext(), "PARA", yyline, yycolumn);
            }
          // fall through
          case 109: break;
          case 40:
            { return token(yytext(), "RAIZ", yyline, yycolumn);
            }
          // fall through
          case 110: break;
          case 41:
            { return token(yytext(), "SINO", yyline, yycolumn);
            }
          // fall through
          case 111: break;
          case 42:
            { return token(yytext(), "CLASE", yyline, yycolumn);
            }
          // fall through
          case 112: break;
          case 43:
            { return token(yytext(), "COMUN", yyline, yycolumn);
            }
          // fall through
          case 113: break;
          case 44:
            { return token(yytext(), "FALSO", yyline, yycolumn);
            }
          // fall through
          case 114: break;
          case 45:
            { return token(yytext(), "FINAL", yyline, yycolumn);
            }
          // fall through
          case 115: break;
          case 46:
            { return token(yytext(), "MISMO", yyline, yycolumn);
            }
          // fall through
          case 116: break;
          case 47:
            { return token(yytext(), "RANGO", yyline, yycolumn);
            }
          // fall through
          case 117: break;
          case 48:
            { return token(yytext(), "TEXTO", yyline, yycolumn);
            }
          // fall through
          case 118: break;
          case 49:
            { return token(yytext(), "VACIO", yyline, yycolumn);
            }
          // fall through
          case 119: break;
          case 50:
            { return token(yytext(), "ENTERO", yyline, yycolumn);
            }
          // fall through
          case 120: break;
          case 51:
            { return token(yytext(), "HEREDA", yyline, yycolumn);
            }
          // fall through
          case 121: break;
          case 52:
            { return token(yytext(), "INICIO", yyline, yycolumn);
            }
          // fall through
          case 122: break;
          case 53:
            { return token(yytext(), "ROMPER", yyline, yycolumn);
            }
          // fall through
          case 123: break;
          case 54:
            { return token(yytext(), "SALIDA", yyline, yycolumn);
            }
          // fall through
          case 124: break;
          case 55:
            { return token(yytext(), "BOOLEANO", yyline, yycolumn);
            }
          // fall through
          case 125: break;
          case 56:
            { return token(yytext(), "DECIMAL", yyline, yycolumn);
            }
          // fall through
          case 126: break;
          case 57:
            { return token(yytext(), "ENTRADA", yyline, yycolumn);
            }
          // fall through
          case 127: break;
          case 58:
            { return token(yytext(), "EXCEPTO", yyline, yycolumn);
            }
          // fall through
          case 128: break;
          case 59:
            { return token(yytext(), "PRIVADO", yyline, yycolumn);
            }
          // fall through
          case 129: break;
          case 60:
            { return token(yytext(), "PUBLICO", yyline, yycolumn);
            }
          // fall through
          case 130: break;
          case 61:
            { return token(yytext(), "FLOTANTE", yyline, yycolumn);
            }
          // fall through
          case 131: break;
          case 62:
            { return token(yytext(), "ESTATICO", yyline, yycolumn);
            }
          // fall through
          case 132: break;
          case 63:
            { return token(yytext(), "IMPORTAR", yyline, yycolumn);
            }
          // fall through
          case 133: break;
          case 64:
            { return token(yytext(), "IMPRIMIR", yyline, yycolumn);
            }
          // fall through
          case 134: break;
          case 65:
            { return token(yytext(), "INTENTAR", yyline, yycolumn);
            }
          // fall through
          case 135: break;
          case 66:
            { return token(yytext(), "MIENTRAS", yyline, yycolumn);
            }
          // fall through
          case 136: break;
          case 67:
            { return token(yytext(), "RETORNAR", yyline, yycolumn);
            }
          // fall through
          case 137: break;
          case 68:
            { return token(yytext(), "PRINCIPAL", yyline, yycolumn);
            }
          // fall through
          case 138: break;
          case 69:
            { return token(yytext(), "SIGUIENTE", yyline, yycolumn);
            }
          // fall through
          case 139: break;
          case 70:
            { return token(yytext(), "VERDADERO", yyline, yycolumn);
            }
          // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
