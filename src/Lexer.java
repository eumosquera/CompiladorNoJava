// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


@SuppressWarnings("fallthrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\4\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\11\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\2\36\1\40\1\41"+
    "\1\42\1\43\1\44\1\36\1\45\1\46\1\47\1\50"+
    "\1\51\1\36\1\52\1\53\1\54\1\55\1\0\1\56"+
    "\1\0\1\36\1\0\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\36\1\66\2\36\1\67\1\70\1\71"+
    "\1\72\1\73\1\36\1\74\1\75\1\76\1\77\1\100"+
    "\1\36\1\101\1\53\1\102\1\103\1\0\1\104\7\0"+
    "\1\3\73\0\1\105\7\0\1\105\3\0\1\105\3\0"+
    "\1\105\1\0\1\105\6\0\1\105\1\0\1\105\4\0"+
    "\1\105\7\0\1\105\3\0\1\105\3\0\1\105\1\0"+
    "\1\105\6\0\1\105\1\0\1\105\u012b\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\11\23\1\24\5\23\1\25"+
    "\1\26\1\27\15\23\1\30\1\31\1\32\1\33\1\0"+
    "\1\34\1\35\1\0\1\2\1\0\1\36\1\37\1\40"+
    "\12\23\1\41\2\23\1\41\15\23\1\42\15\23\1\43"+
    "\1\23\1\43\10\23\2\0\2\44\75\23\1\0\1\2"+
    "\2\23\1\45\37\23\1\46\4\23\1\47\1\23\1\44"+
    "\7\23\1\50\14\23\1\51\1\52\12\23\1\53\1\54"+
    "\13\23\1\55\5\23\1\56\10\23\1\57\1\60\7\23"+
    "\1\61\12\23\1\62\13\23\1\63\1\23\1\64\5\23"+
    "\1\65\1\23\1\66\1\67\1\70\12\23\1\71\1\72"+
    "\6\23\1\73\1\74\1\75\1\76\1\77\1\100\4\23"+
    "\1\101\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\106\0\214\0\322\0\u0118\0\106\0\106"+
    "\0\106\0\106\0\u015e\0\106\0\u01a4\0\106\0\u01ea\0\u0230"+
    "\0\u0276\0\106\0\106\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u038e"+
    "\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u038e\0\106\0\106"+
    "\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c"+
    "\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\106\0\106\0\106"+
    "\0\106\0\u0118\0\106\0\106\0\u0af0\0\u0b36\0\u0b7c\0\106"+
    "\0\106\0\106\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20"+
    "\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
    "\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180"+
    "\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u038e\0\u1324\0\u136a"+
    "\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a"+
    "\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca"+
    "\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa"+
    "\0\106\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4"+
    "\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14"+
    "\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044"+
    "\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274"+
    "\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4"+
    "\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4"+
    "\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904"+
    "\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34"+
    "\0\u19b4\0\u2b7a\0\u2bc0\0\u038e\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8"+
    "\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08"+
    "\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138"+
    "\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322\0\u3368"+
    "\0\u33ae\0\u33f4\0\u343a\0\u038e\0\u3480\0\u34c6\0\u350c\0\u3552"+
    "\0\u038e\0\u3598\0\u038e\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6"+
    "\0\u373c\0\u3782\0\u038e\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0"+
    "\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u038e"+
    "\0\u038e\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4"+
    "\0\u3cfa\0\u3d40\0\u3d86\0\u038e\0\u038e\0\u3dcc\0\u3e12\0\u3e58"+
    "\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u4042\0\u4088"+
    "\0\u038e\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u41e6\0\u038e\0\u422c"+
    "\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416\0\u038e"+
    "\0\u038e\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba\0\u4600"+
    "\0\u038e\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4\0\u47ea"+
    "\0\u4830\0\u4876\0\u48bc\0\u038e\0\u4902\0\u4948\0\u498e\0\u49d4"+
    "\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78\0\u4bbe\0\u038e"+
    "\0\u4c04\0\u038e\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u038e"+
    "\0\u4da8\0\u038e\0\u038e\0\u038e\0\u4dee\0\u4e34\0\u4e7a\0\u4ec0"+
    "\0\u4f06\0\u4f4c\0\u4f92\0\u4fd8\0\u501e\0\u5064\0\u038e\0\u038e"+
    "\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u51c2\0\u5208\0\u038e\0\u038e"+
    "\0\u038e\0\u038e\0\u038e\0\u038e\0\u524e\0\u5294\0\u52da\0\u5320"+
    "\0\u038e\0\u038e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\2\27\1\35\1\27\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\27\1\45"+
    "\1\27\1\46\1\27\1\47\1\50\1\27\1\51\1\52"+
    "\1\53\1\54\1\55\1\27\1\56\1\27\1\57\1\60"+
    "\1\40\1\61\1\62\1\63\1\64\1\27\1\65\2\27"+
    "\1\66\1\67\1\27\110\0\1\3\130\0\1\70\66\0"+
    "\1\71\6\0\2\72\1\0\2\72\5\0\26\72\2\0"+
    "\24\72\16\0\1\73\107\0\1\74\102\0\1\75\4\0"+
    "\1\76\104\0\1\77\105\0\1\77\1\0\2\21\111\0"+
    "\1\100\105\0\1\101\105\0\1\102\100\0\2\27\5\0"+
    "\26\27\2\0\24\27\2\0\1\27\20\0\2\27\5\0"+
    "\14\27\1\103\11\27\2\0\13\27\1\104\10\27\2\0"+
    "\1\27\20\0\2\27\5\0\1\105\10\27\1\106\2\27"+
    "\1\107\11\27\2\0\1\110\7\27\1\111\2\27\1\112"+
    "\10\27\2\0\1\27\20\0\2\27\5\0\4\27\1\113"+
    "\21\27\2\0\4\27\1\114\17\27\2\0\1\27\20\0"+
    "\2\27\5\0\13\27\1\115\6\27\1\116\1\117\2\27"+
    "\2\0\12\27\1\120\6\27\1\121\1\122\1\27\2\0"+
    "\1\27\20\0\2\27\5\0\1\123\7\27\1\124\1\125"+
    "\14\27\2\0\1\126\12\27\1\127\10\27\2\0\1\27"+
    "\20\0\2\27\5\0\12\27\1\130\1\131\12\27\2\0"+
    "\11\27\1\132\1\133\11\27\2\0\1\27\20\0\2\27"+
    "\5\0\10\27\1\134\15\27\2\0\7\27\1\135\14\27"+
    "\2\0\1\27\20\0\2\27\5\0\14\27\1\136\11\27"+
    "\2\0\13\27\1\136\10\27\2\0\1\27\20\0\2\27"+
    "\5\0\1\137\15\27\1\140\2\27\1\141\4\27\2\0"+
    "\1\142\14\27\1\143\2\27\1\144\3\27\2\0\1\27"+
    "\20\0\2\27\5\0\1\145\3\27\1\146\7\27\1\147"+
    "\11\27\2\0\1\150\3\27\1\151\6\27\1\152\10\27"+
    "\2\0\1\27\20\0\2\27\5\0\1\153\7\27\1\154"+
    "\15\27\2\0\1\155\6\27\1\156\14\27\2\0\1\27"+
    "\20\0\2\27\5\0\4\27\1\157\21\27\2\0\4\27"+
    "\1\160\17\27\2\0\1\27\20\0\2\27\5\0\1\161"+
    "\3\27\1\162\21\27\2\0\1\163\3\27\1\164\17\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\13\27"+
    "\1\104\10\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\1\110\7\27\1\111\2\27\1\112\10\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\4\27\1\114"+
    "\17\27\2\0\1\27\20\0\2\27\5\0\26\27\2\0"+
    "\12\27\1\120\6\27\1\121\1\122\1\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\1\126\6\27\1\165"+
    "\3\27\1\166\10\27\2\0\1\27\20\0\2\27\5\0"+
    "\26\27\2\0\11\27\1\132\1\133\11\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\7\27\1\135\14\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\13\27"+
    "\1\136\10\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\1\142\14\27\1\143\2\27\1\144\3\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\1\150\3\27"+
    "\1\151\6\27\1\152\10\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\1\155\6\27\1\156\14\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\4\27\1\160"+
    "\17\27\2\0\1\27\20\0\2\27\5\0\26\27\2\0"+
    "\1\163\3\27\1\164\17\27\2\0\1\27\12\167\1\170"+
    "\73\167\2\76\1\3\1\76\1\4\101\76\20\0\1\171"+
    "\1\172\104\0\2\27\5\0\11\27\1\173\14\27\2\0"+
    "\24\27\2\0\1\27\20\0\2\27\5\0\26\27\2\0"+
    "\13\27\1\174\10\27\2\0\1\27\20\0\2\27\5\0"+
    "\17\27\1\175\6\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\1\176\25\27\2\0\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\12\27\1\177\13\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\16\27"+
    "\1\200\5\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\1\201\23\27\2\0\1\27\20\0\2\27\5\0"+
    "\26\27\2\0\11\27\1\202\12\27\2\0\1\27\20\0"+
    "\2\27\5\0\2\27\1\203\23\27\2\0\24\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\2\27\1\204"+
    "\21\27\2\0\1\27\20\0\2\27\5\0\20\27\1\205"+
    "\5\27\2\0\24\27\2\0\1\27\20\0\2\27\5\0"+
    "\1\206\25\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\2\27\1\207\23\27\2\0\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\17\27\1\210\4\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\1\211"+
    "\23\27\2\0\1\27\20\0\2\27\5\0\26\27\2\0"+
    "\2\27\1\212\21\27\2\0\1\27\20\0\2\27\5\0"+
    "\11\27\1\213\14\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\13\27\1\214\12\27\2\0\24\27\2\0"+
    "\1\27\20\0\2\27\5\0\14\27\1\215\11\27\2\0"+
    "\24\27\2\0\1\27\20\0\2\27\5\0\26\27\2\0"+
    "\10\27\1\216\13\27\2\0\1\27\20\0\2\27\5\0"+
    "\26\27\2\0\17\27\1\217\4\27\2\0\1\27\20\0"+
    "\2\27\5\0\15\27\1\220\10\27\2\0\24\27\2\0"+
    "\1\27\20\0\2\27\5\0\10\27\1\221\7\27\1\222"+
    "\5\27\2\0\24\27\2\0\1\27\20\0\2\27\5\0"+
    "\26\27\2\0\14\27\1\223\7\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\7\27\1\224\7\27\1\225"+
    "\4\27\2\0\1\27\20\0\2\27\5\0\4\27\1\226"+
    "\12\27\1\227\6\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\4\27\1\230\11\27\1\231"+
    "\5\27\2\0\1\27\20\0\2\27\5\0\16\27\1\232"+
    "\7\27\2\0\24\27\2\0\1\27\20\0\2\27\5\0"+
    "\10\27\1\233\15\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\1\27\1\234\24\27\2\0\24\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\15\27\1\235"+
    "\6\27\2\0\1\27\20\0\2\27\5\0\26\27\2\0"+
    "\7\27\1\236\14\27\2\0\1\27\20\0\2\27\5\0"+
    "\26\27\2\0\1\27\1\237\22\27\2\0\1\27\20\0"+
    "\2\27\5\0\10\27\1\240\2\27\1\241\12\27\2\0"+
    "\24\27\2\0\1\27\20\0\2\27\5\0\1\242\17\27"+
    "\1\243\5\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\12\27\1\244\13\27\2\0\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\7\27\1\245\2\27"+
    "\1\246\11\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\1\247\16\27\1\250\4\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\11\27\1\251\12\27\2\0"+
    "\1\27\20\0\2\27\5\0\11\27\1\252\14\27\2\0"+
    "\24\27\2\0\1\27\20\0\2\27\5\0\6\27\1\253"+
    "\4\27\1\254\12\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\10\27\1\255\13\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\6\27\1\256"+
    "\3\27\1\257\11\27\2\0\1\27\20\0\2\27\5\0"+
    "\23\27\1\260\2\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\22\27\1\261\1\27\2\0"+
    "\1\27\20\0\2\27\5\0\2\27\1\262\23\27\2\0"+
    "\24\27\2\0\1\27\20\0\2\27\5\0\16\27\1\263"+
    "\7\27\2\0\24\27\2\0\1\27\20\0\2\27\5\0"+
    "\26\27\2\0\2\27\1\264\21\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\15\27\1\265\6\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\12\27\1\266"+
    "\11\27\2\0\1\27\20\0\2\27\5\0\26\27\2\0"+
    "\17\27\1\267\4\27\2\0\1\27\12\167\1\270\105\167"+
    "\1\270\4\167\1\271\66\167\20\0\2\172\104\0\2\27"+
    "\5\0\4\27\1\272\21\27\2\0\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\10\27\1\273\13\27"+
    "\2\0\1\27\20\0\2\27\5\0\14\27\1\274\11\27"+
    "\2\0\24\27\2\0\1\27\20\0\2\27\5\0\17\27"+
    "\1\275\6\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\21\27\1\276\4\27\2\0\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\13\27\1\274\10\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\16\27"+
    "\1\277\5\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\20\27\1\300\3\27\2\0\1\27\20\0\2\27"+
    "\5\0\10\27\1\301\15\27\2\0\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\7\27\1\302\14\27"+
    "\2\0\1\27\20\0\2\27\5\0\4\27\1\303\11\27"+
    "\1\304\7\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\11\27\1\305\14\27\2\0\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\4\27\1\306\21\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\4\27"+
    "\1\307\10\27\1\310\6\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\10\27\1\311\13\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\4\27\1\312\17\27"+
    "\2\0\1\27\20\0\2\27\5\0\17\27\1\313\6\27"+
    "\2\0\24\27\2\0\1\27\20\0\2\27\5\0\1\314"+
    "\25\27\2\0\24\27\2\0\1\27\20\0\2\27\5\0"+
    "\20\27\1\315\5\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\16\27\1\316\5\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\1\317\23\27"+
    "\2\0\1\27\20\0\2\27\5\0\14\27\1\320\1\27"+
    "\1\321\7\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\2\27\1\322\23\27\2\0\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\4\27\1\323\21\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\13\27"+
    "\1\324\1\27\1\325\6\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\2\27\1\326\21\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\4\27\1\327\17\27"+
    "\2\0\1\27\20\0\2\27\5\0\13\27\1\330\12\27"+
    "\2\0\24\27\2\0\1\27\20\0\2\27\5\0\12\27"+
    "\1\331\13\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\12\27\1\332\11\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\11\27\1\333\12\27"+
    "\2\0\1\27\20\0\2\27\5\0\1\334\25\27\2\0"+
    "\24\27\2\0\1\27\20\0\2\27\5\0\22\27\1\335"+
    "\3\27\2\0\24\27\2\0\1\27\20\0\2\27\5\0"+
    "\11\27\1\336\14\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\1\334\23\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\21\27\1\337\2\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\10\27"+
    "\1\340\13\27\2\0\1\27\20\0\2\27\5\0\25\27"+
    "\1\341\2\0\24\27\2\0\1\27\20\0\2\27\5\0"+
    "\6\27\1\342\17\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\11\27\1\343\14\27\2\0\24\27\2\0"+
    "\1\27\20\0\2\27\5\0\14\27\1\344\11\27\2\0"+
    "\24\27\2\0\1\27\20\0\2\27\5\0\15\27\1\345"+
    "\10\27\2\0\24\27\2\0\1\27\20\0\2\27\5\0"+
    "\26\27\2\0\23\27\1\341\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\6\27\1\346\15\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\10\27\1\343\13\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\13\27"+
    "\1\347\10\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\14\27\1\350\7\27\2\0\1\27\20\0\2\27"+
    "\5\0\10\27\1\351\15\27\2\0\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\21\27\1\352\4\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\14\27\1\353\11\27"+
    "\2\0\24\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\7\27\1\354\14\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\20\27\1\355\3\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\13\27\1\353\10\27"+
    "\2\0\1\27\20\0\2\27\5\0\20\27\1\356\5\27"+
    "\2\0\24\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\17\27\1\357\4\27\2\0\1\27\20\0\2\27"+
    "\5\0\10\27\1\360\15\27\2\0\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\3\27\1\361\22\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\7\27"+
    "\1\362\14\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\3\27\1\363\20\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\1\364\23\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\1\365\23\27\2\0\1\27"+
    "\12\167\1\270\4\167\1\3\66\167\20\0\2\27\5\0"+
    "\1\366\25\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\4\27\1\367\17\27\2\0\1\27"+
    "\20\0\2\27\5\0\4\27\1\370\21\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\13\27\1\371\12\27"+
    "\2\0\24\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\4\27\1\370\17\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\12\27\1\371\11\27\2\0\1\27"+
    "\20\0\2\27\5\0\12\27\1\372\13\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\11\27"+
    "\1\373\12\27\2\0\1\27\20\0\2\27\5\0\16\27"+
    "\1\374\7\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\1\375\25\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\21\27\1\376\4\27\2\0\24\27\2\0"+
    "\1\27\20\0\2\27\5\0\15\27\1\377\10\27\2\0"+
    "\24\27\2\0\1\27\20\0\2\27\5\0\26\27\2\0"+
    "\15\27\1\u0100\6\27\2\0\1\27\20\0\2\27\5\0"+
    "\26\27\2\0\1\u0101\23\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\20\27\1\u0102\3\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\14\27\1\u0103\7\27"+
    "\2\0\1\27\20\0\2\27\5\0\14\27\1\u0104\11\27"+
    "\2\0\24\27\2\0\1\27\20\0\2\27\5\0\11\27"+
    "\1\u0105\14\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\1\u0106\25\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\13\27\1\u0104\10\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\12\27\1\u0107"+
    "\11\27\2\0\1\27\20\0\2\27\5\0\16\27\1\u0108"+
    "\7\27\2\0\24\27\2\0\1\27\20\0\2\27\5\0"+
    "\10\27\1\u0109\15\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\10\27\1\u010a\15\27\2\0\24\27\2\0"+
    "\1\27\20\0\2\27\5\0\13\27\1\u010b\12\27\2\0"+
    "\24\27\2\0\1\27\20\0\2\27\5\0\26\27\2\0"+
    "\15\27\1\u010c\6\27\2\0\1\27\20\0\2\27\5\0"+
    "\26\27\2\0\7\27\1\u010d\14\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\7\27\1\u010e\14\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\12\27\1\u010f"+
    "\11\27\2\0\1\27\20\0\2\27\5\0\20\27\1\u0110"+
    "\5\27\2\0\24\27\2\0\1\27\20\0\2\27\5\0"+
    "\14\27\1\u0111\11\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\17\27\1\u0112\4\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\13\27\1\u0111"+
    "\10\27\2\0\1\27\20\0\2\27\5\0\1\u0113\25\27"+
    "\2\0\24\27\2\0\1\27\20\0\2\27\5\0\10\27"+
    "\1\u0114\15\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\1\u0115\23\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\7\27\1\u0116\14\27\2\0"+
    "\1\27\20\0\2\27\5\0\14\27\1\u0117\11\27\2\0"+
    "\24\27\2\0\1\27\20\0\2\27\5\0\16\27\1\u0118"+
    "\7\27\2\0\24\27\2\0\1\27\20\0\2\27\5\0"+
    "\4\27\1\u0119\21\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\13\27\1\u0117\10\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\15\27\1\u011a"+
    "\6\27\2\0\1\27\20\0\2\27\5\0\26\27\2\0"+
    "\4\27\1\u011b\17\27\2\0\1\27\20\0\2\27\5\0"+
    "\3\27\1\u011c\22\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\10\27\1\u011d\15\27\2\0\24\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\3\27\1\u011e"+
    "\20\27\2\0\1\27\20\0\2\27\5\0\26\27\2\0"+
    "\7\27\1\u011f\14\27\2\0\1\27\20\0\2\27\5\0"+
    "\14\27\1\u0120\11\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\13\27\1\u0120\10\27\2\0"+
    "\1\27\20\0\2\27\5\0\14\27\1\u0121\11\27\2\0"+
    "\24\27\2\0\1\27\20\0\2\27\5\0\1\u0122\25\27"+
    "\2\0\24\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\13\27\1\u0121\10\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\1\u0123\23\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\10\27\1\u0105\13\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\12\27\1\u0124"+
    "\11\27\2\0\1\27\20\0\2\27\5\0\13\27\1\u0125"+
    "\12\27\2\0\24\27\2\0\1\27\20\0\2\27\5\0"+
    "\26\27\2\0\1\u0126\23\27\2\0\1\27\20\0\2\27"+
    "\5\0\1\u0127\25\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\1\u0128\23\27\2\0\1\27"+
    "\20\0\2\27\5\0\14\27\1\u0129\11\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\3\27\1\u012a\22\27"+
    "\2\0\24\27\2\0\1\27\20\0\2\27\5\0\1\u012b"+
    "\25\27\2\0\24\27\2\0\1\27\20\0\2\27\5\0"+
    "\20\27\1\u012c\5\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\13\27\1\u0129\10\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\3\27\1\u012d"+
    "\20\27\2\0\1\27\20\0\2\27\5\0\26\27\2\0"+
    "\1\u012e\23\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\17\27\1\u012f\4\27\2\0\1\27\20\0\2\27"+
    "\5\0\13\27\1\u0130\12\27\2\0\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\17\27\1\u0131\4\27"+
    "\2\0\1\27\20\0\2\27\5\0\20\27\1\u0132\5\27"+
    "\2\0\24\27\2\0\1\27\20\0\2\27\5\0\12\27"+
    "\1\u0133\13\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\14\27\1\u0134\11\27\2\0\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\20\27\1\u0135\5\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\17\27"+
    "\1\u0136\4\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\11\27\1\u0137\12\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\13\27\1\u0134\10\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\17\27\1\u0138\4\27"+
    "\2\0\1\27\20\0\2\27\5\0\16\27\1\u0139\7\27"+
    "\2\0\24\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\15\27\1\u013a\6\27\2\0\1\27\20\0\2\27"+
    "\5\0\3\27\1\u013b\22\27\2\0\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\2\27\1\u013c\23\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\3\27"+
    "\1\u013d\20\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\2\27\1\u013e\21\27\2\0\1\27\20\0\2\27"+
    "\5\0\13\27\1\u013f\12\27\2\0\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\16\27\1\u0140\7\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\12\27"+
    "\1\u0141\11\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\15\27\1\u0140\6\27\2\0\1\27\20\0\2\27"+
    "\5\0\1\u0142\25\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\4\27\1\u0143\21\27\2\0\24\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\1\u0142\23\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\4\27"+
    "\1\u0144\17\27\2\0\1\27\20\0\2\27\5\0\3\27"+
    "\1\u0145\22\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\3\27\1\u0146\20\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\17\27\1\u0147\4\27"+
    "\2\0\1\27\20\0\2\27\5\0\14\27\1\u0148\11\27"+
    "\2\0\24\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\12\27\1\u0149\11\27\2\0\1\27\20\0\2\27"+
    "\5\0\11\27\1\u014a\14\27\2\0\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\10\27\1\u014a\13\27"+
    "\2\0\1\27\20\0\2\27\5\0\1\u014b\25\27\2\0"+
    "\24\27\2\0\1\27\20\0\2\27\5\0\16\27\1\274"+
    "\7\27\2\0\24\27\2\0\1\27\20\0\2\27\5\0"+
    "\14\27\1\u014c\11\27\2\0\24\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\1\u014b\23\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\15\27\1\274\6\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\13\27"+
    "\1\u014c\10\27\2\0\1\27\20\0\2\27\5\0\20\27"+
    "\1\u014d\5\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\4\27\1\u014e\17\27\2\0\1\27"+
    "\20\0\2\27\5\0\1\u014f\25\27\2\0\24\27\2\0"+
    "\1\27\20\0\2\27\5\0\10\27\1\u0150\15\27\2\0"+
    "\24\27\2\0\1\27\20\0\2\27\5\0\1\u0151\25\27"+
    "\2\0\24\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\1\u0152\23\27\2\0\1\27\20\0\2\27\5\0"+
    "\26\27\2\0\7\27\1\u0153\14\27\2\0\1\27\20\0"+
    "\2\27\5\0\26\27\2\0\1\u0154\23\27\2\0\1\27"+
    "\20\0\2\27\5\0\1\u0155\25\27\2\0\24\27\2\0"+
    "\1\27\20\0\2\27\5\0\26\27\2\0\1\u0156\23\27"+
    "\2\0\1\27\20\0\2\27\5\0\14\27\1\u0157\11\27"+
    "\2\0\24\27\2\0\1\27\20\0\2\27\5\0\14\27"+
    "\1\u0158\11\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\13\27\1\u0157\10\27\2\0\1\27"+
    "\20\0\2\27\5\0\26\27\2\0\13\27\1\u0158\10\27"+
    "\2\0\1\27\20\0\2\27\5\0\1\u0159\25\27\2\0"+
    "\24\27\2\0\1\27\20\0\2\27\5\0\26\27\2\0"+
    "\1\u015a\23\27\2\0\1\27\20\0\2\27\5\0\13\27"+
    "\1\u015b\12\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\12\27\1\u015c\11\27\2\0\1\27"+
    "\20\0\2\27\5\0\4\27\1\u015d\21\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\4\27"+
    "\1\u015e\17\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\4\27\1\u015f\17\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\13\27\1\u0148\10\27\2\0\1\27"+
    "\20\0\2\27\5\0\4\27\1\u015f\21\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\17\27"+
    "\1\u015f\4\27\2\0\1\27\20\0\2\27\5\0\16\27"+
    "\1\u0160\7\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\16\27\1\u0161\7\27\2\0\24\27\2\0\1\27"+
    "\20\0\2\27\5\0\16\27\1\u0162\7\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\15\27"+
    "\1\u0160\6\27\2\0\1\27\20\0\2\27\5\0\26\27"+
    "\2\0\15\27\1\u0161\6\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\15\27\1\u0162\6\27\2\0\1\27"+
    "\20\0\2\27\5\0\17\27\1\u0163\6\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\16\27"+
    "\1\u0163\5\27\2\0\1\27\20\0\2\27\5\0\16\27"+
    "\1\u0164\7\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\15\27\1\u0164\6\27\2\0\1\27"+
    "\20\0\2\27\5\0\20\27\1\u0165\5\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\17\27"+
    "\1\u0166\4\27\2\0\1\27\20\0\2\27\5\0\16\27"+
    "\1\u0167\7\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\15\27\1\u0168\6\27\2\0\1\27"+
    "\20\0\2\27\5\0\4\27\1\u0169\21\27\2\0\24\27"+
    "\2\0\1\27\20\0\2\27\5\0\26\27\2\0\4\27"+
    "\1\u0169\17\27\2\0\1\27\20\0\2\27\5\0\14\27"+
    "\1\u016a\11\27\2\0\24\27\2\0\1\27\20\0\2\27"+
    "\5\0\26\27\2\0\13\27\1\u016a\10\27\2\0\1\27";

  private static int [] zzUnpacktrans() {
    int [] result = new int[21350];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\4\11\1\1\1\11\1\1\1\11"+
    "\3\1\2\11\23\1\2\11\15\1\4\11\1\0\2\11"+
    "\1\0\1\1\1\0\3\11\64\1\2\0\1\11\76\1"+
    "\1\0\262\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
          // fall through
          case 67: break;
          case 2:
            { /*Ignorar*/
            }
          // fall through
          case 68: break;
          case 3:
            { return token(yytext(), "COMILLADOBLE", yyline, yycolumn);
            }
          // fall through
          case 69: break;
          case 4:
            { return token(yytext(), "COMILLASIMPLE", yyline, yycolumn);
            }
          // fall through
          case 70: break;
          case 5:
            { return token(yytext(), "PARENTESISABIERTO", yyline, yycolumn);
            }
          // fall through
          case 71: break;
          case 6:
            { return token(yytext(), "PARENTESISCERRADO", yyline, yycolumn);
            }
          // fall through
          case 72: break;
          case 7:
            { return token(yytext(), "MULTIPLICACION", yyline, yycolumn);
            }
          // fall through
          case 73: break;
          case 8:
            { return token(yytext(), "SUMA", yyline, yycolumn);
            }
          // fall through
          case 74: break;
          case 9:
            { return token(yytext(), "COMA", yyline, yycolumn);
            }
          // fall through
          case 75: break;
          case 10:
            { return token(yytext(), "RESTA", yyline, yycolumn);
            }
          // fall through
          case 76: break;
          case 11:
            { return token(yytext(), "PUNTO", yyline, yycolumn);
            }
          // fall through
          case 77: break;
          case 12:
            { return token(yytext(), "DIVISION", yyline, yycolumn);
            }
          // fall through
          case 78: break;
          case 13:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
          // fall through
          case 79: break;
          case 14:
            { return token(yytext(), "DOSPUNTOS", yyline, yycolumn);
            }
          // fall through
          case 80: break;
          case 15:
            { return token(yytext(), "PUNTOCOMA", yyline, yycolumn);
            }
          // fall through
          case 81: break;
          case 16:
            { return token(yytext(), "MENORQUE", yyline, yycolumn);
            }
          // fall through
          case 82: break;
          case 17:
            { return token(yytext(), "ASIGNACION", yyline, yycolumn);
            }
          // fall through
          case 83: break;
          case 18:
            { return token(yytext(), "MAYORQUE", yyline, yycolumn);
            }
          // fall through
          case 84: break;
          case 19:
            { return token(yytext(), "ID", yyline, yycolumn);
            }
          // fall through
          case 85: break;
          case 20:
            { return token(yytext(), "O", yyline, yycolumn);
            }
          // fall through
          case 86: break;
          case 21:
            { return token(yytext(), "Y", yyline, yycolumn);
            }
          // fall through
          case 87: break;
          case 22:
            { return token(yytext(), "CORCHETEABIERTO", yyline, yycolumn);
            }
          // fall through
          case 88: break;
          case 23:
            { return token(yytext(), "CORCHETECERRADO", yyline, yycolumn);
            }
          // fall through
          case 89: break;
          case 24:
            { return token(yytext(), "LLAVEABIERTO", yyline, yycolumn);
            }
          // fall through
          case 90: break;
          case 25:
            { return token(yytext(), "LLAVECERRADO", yyline, yycolumn);
            }
          // fall through
          case 91: break;
          case 26:
            { return token(yytext(), "DIFERENTE", yyline, yycolumn);
            }
          // fall through
          case 92: break;
          case 27:
            { return token(yytext(), "CADENA", yyline, yycolumn);
            }
          // fall through
          case 93: break;
          case 28:
            { return token(yytext(), "INCREMENTO", yyline, yycolumn);
            }
          // fall through
          case 94: break;
          case 29:
            { return token(yytext(), "DECREMENTO", yyline, yycolumn);
            }
          // fall through
          case 95: break;
          case 30:
            { return token(yytext(), "MENORIGUALQUE", yyline, yycolumn);
            }
          // fall through
          case 96: break;
          case 31:
            { return token(yytext(), "IGUAL", yyline, yycolumn);
            }
          // fall through
          case 97: break;
          case 32:
            { return token(yytext(), "MAYORIGUALQUE", yyline, yycolumn);
            }
          // fall through
          case 98: break;
          case 33:
            { return token(yytext(), "EN", yyline, yycolumn);
            }
          // fall through
          case 99: break;
          case 34:
            { return token(yytext(), "NO", yyline, yycolumn);
            }
          // fall through
          case 100: break;
          case 35:
            { return token(yytext(), "SI", yyline, yycolumn);
            }
          // fall through
          case 101: break;
          case 36:
            { return token(yytext(), "REAL", yyline, yycolumn);
            }
          // fall through
          case 102: break;
          case 37:
            { return token(yytext(), "CASO", yyline, yycolumn);
            }
          // fall through
          case 103: break;
          case 38:
            { return token(yytext(), "PARA", yyline, yycolumn);
            }
          // fall through
          case 104: break;
          case 39:
            { return token(yytext(), "RAIZ", yyline, yycolumn);
            }
          // fall through
          case 105: break;
          case 40:
            { return token(yytext(), "SINO", yyline, yycolumn);
            }
          // fall through
          case 106: break;
          case 41:
            { return token(yytext(), "CLASE", yyline, yycolumn);
            }
          // fall through
          case 107: break;
          case 42:
            { return token(yytext(), "COMUN", yyline, yycolumn);
            }
          // fall through
          case 108: break;
          case 43:
            { return token(yytext(), "FALSO", yyline, yycolumn);
            }
          // fall through
          case 109: break;
          case 44:
            { return token(yytext(), "FINAL", yyline, yycolumn);
            }
          // fall through
          case 110: break;
          case 45:
            { return token(yytext(), "MISMO", yyline, yycolumn);
            }
          // fall through
          case 111: break;
          case 46:
            { return token(yytext(), "RANGO", yyline, yycolumn);
            }
          // fall through
          case 112: break;
          case 47:
            { return token(yytext(), "TEXTO", yyline, yycolumn);
            }
          // fall through
          case 113: break;
          case 48:
            { return token(yytext(), "VACIO", yyline, yycolumn);
            }
          // fall through
          case 114: break;
          case 49:
            { return token(yytext(), "ENTERO", yyline, yycolumn);
            }
          // fall through
          case 115: break;
          case 50:
            { return token(yytext(), "INICIO", yyline, yycolumn);
            }
          // fall through
          case 116: break;
          case 51:
            { return token(yytext(), "ROMPER", yyline, yycolumn);
            }
          // fall through
          case 117: break;
          case 52:
            { return token(yytext(), "SALIDA", yyline, yycolumn);
            }
          // fall through
          case 118: break;
          case 53:
            { return token(yytext(), "BOOLEANO", yyline, yycolumn);
            }
          // fall through
          case 119: break;
          case 54:
            { return token(yytext(), "DECIMAL", yyline, yycolumn);
            }
          // fall through
          case 120: break;
          case 55:
            { return token(yytext(), "ENTRADA", yyline, yycolumn);
            }
          // fall through
          case 121: break;
          case 56:
            { return token(yytext(), "EXCEPTO", yyline, yycolumn);
            }
          // fall through
          case 122: break;
          case 57:
            { return token(yytext(), "PRIVADO", yyline, yycolumn);
            }
          // fall through
          case 123: break;
          case 58:
            { return token(yytext(), "PUBLICO", yyline, yycolumn);
            }
          // fall through
          case 124: break;
          case 59:
            { return token(yytext(), "FLOTANTE", yyline, yycolumn);
            }
          // fall through
          case 125: break;
          case 60:
            { return token(yytext(), "IMPORTAR", yyline, yycolumn);
            }
          // fall through
          case 126: break;
          case 61:
            { return token(yytext(), "IMPRIMIR", yyline, yycolumn);
            }
          // fall through
          case 127: break;
          case 62:
            { return token(yytext(), "INTENTAR", yyline, yycolumn);
            }
          // fall through
          case 128: break;
          case 63:
            { return token(yytext(), "MIENTRAS", yyline, yycolumn);
            }
          // fall through
          case 129: break;
          case 64:
            { return token(yytext(), "RETORNAR", yyline, yycolumn);
            }
          // fall through
          case 130: break;
          case 65:
            { return token(yytext(), "SIGUIENTE", yyline, yycolumn);
            }
          // fall through
          case 131: break;
          case 66:
            { return token(yytext(), "VERDADERO", yyline, yycolumn);
            }
          // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
