// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/LexerColor.flex

import compilerTools.TextColor;
import java.awt.Color;


@SuppressWarnings("fallthrough")
class LexerColor {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\0\1\5\5\0\2\6\1\7\1\10\1\0\1\11"+
    "\1\12\1\13\12\14\7\0\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\2\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\26\1\34\1\35\1\36\1\37"+
    "\1\40\1\26\1\41\1\42\1\43\1\6\1\0\1\6"+
    "\1\0\1\26\1\0\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\2\26\1\55\1\56\1\57"+
    "\1\60\1\61\1\26\1\62\1\63\1\64\1\65\1\66"+
    "\1\26\1\67\1\42\1\70\1\6\1\0\1\6\7\0"+
    "\1\3\73\0\1\71\7\0\1\71\3\0\1\71\3\0"+
    "\1\71\1\0\1\71\6\0\1\71\1\0\1\71\4\0"+
    "\1\71\7\0\1\71\3\0\1\71\3\0\1\71\1\0"+
    "\1\71\6\0\1\71\1\0\1\71\u012b\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\3\1\12\4\1\5"+
    "\23\4\1\6\2\0\1\7\7\4\1\10\3\4\1\10"+
    "\33\4\2\10\12\4\2\0\2\7\67\4\1\0\1\7"+
    "\2\4\1\11\36\4\1\10\23\4\1\12\11\4\1\13"+
    "\26\4\1\14\16\4\1\15\23\4\1\16\15\4\1\17"+
    "\2\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\72\0\164\0\256\0\72\0\350\0\u0122"+
    "\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u0196\0\u03da\0\u0414\0\u044e\0\u0488"+
    "\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658"+
    "\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\72"+
    "\0\256\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984"+
    "\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54"+
    "\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464"+
    "\0\72\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca"+
    "\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a"+
    "\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a"+
    "\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a"+
    "\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a"+
    "\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da"+
    "\0\u2114\0\u214e\0\u142a\0\u2188\0\u21c2\0\u0196\0\u21fc\0\u2236"+
    "\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406"+
    "\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6"+
    "\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6"+
    "\0\u27e0\0\u281a\0\u2854\0\u288e\0\u0196\0\u28c8\0\u2902\0\u293c"+
    "\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c"+
    "\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u1172\0\u2ca2"+
    "\0\u0196\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38"+
    "\0\u2e72\0\u2eac\0\u0196\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce"+
    "\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e"+
    "\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334\0\u336e"+
    "\0\u33a8\0\u0196\0\u33e2\0\u341c\0\u3456\0\u3490\0\u11ac\0\u34ca"+
    "\0\u3504\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a"+
    "\0\u0196\0\u36d4\0\u370e\0\u3748\0\u3782\0\u37bc\0\u37f6\0\u3830"+
    "\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6\0\u3a00"+
    "\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\u0196\0\u3b22\0\u3b5c\0\u3b96"+
    "\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66"+
    "\0\u3da0\0\u3dda\0\u0196\0\u3e14\0\u3e4e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\2\1\7"+
    "\1\10\1\2\1\11\1\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\12\1\20\1\21\2\12\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\12\1\31\1\12"+
    "\1\24\2\12\1\32\1\33\1\34\1\35\1\36\1\12"+
    "\1\37\1\40\1\12\1\41\1\42\1\24\1\43\1\44"+
    "\1\45\1\46\1\12\1\47\3\12\74\0\1\3\74\0"+
    "\1\50\3\0\2\51\1\0\55\51\11\0\1\6\72\0"+
    "\1\6\67\0\1\52\3\0\1\53\72\0\56\12\14\0"+
    "\16\12\1\54\25\12\1\55\11\12\14\0\1\12\1\56"+
    "\11\12\1\57\25\12\1\60\14\12\14\0\5\12\1\61"+
    "\26\12\1\62\21\12\14\0\15\12\1\63\3\12\1\64"+
    "\2\12\1\65\1\66\15\12\1\67\3\12\1\70\3\12"+
    "\1\71\2\12\14\0\1\12\1\72\7\12\1\73\1\12"+
    "\1\74\14\12\1\75\13\12\1\76\11\12\14\0\5\12"+
    "\1\77\26\12\1\100\21\12\14\0\14\12\1\101\1\102"+
    "\24\12\1\103\1\104\12\12\14\0\11\12\1\105\26\12"+
    "\1\106\15\12\14\0\16\12\1\24\25\12\1\24\11\12"+
    "\14\0\1\12\1\107\16\12\1\110\2\12\1\111\4\12"+
    "\1\112\15\12\1\113\2\12\1\114\4\12\14\0\1\12"+
    "\1\115\3\12\1\116\10\12\1\117\11\12\1\120\3\12"+
    "\1\121\7\12\1\122\11\12\14\0\11\12\1\123\26\12"+
    "\1\124\15\12\14\0\5\12\1\125\26\12\1\126\21\12"+
    "\14\0\1\12\1\127\3\12\1\130\22\12\1\131\3\12"+
    "\1\132\21\12\14\0\44\12\1\55\11\12\14\0\30\12"+
    "\1\133\10\12\1\60\14\12\14\0\34\12\1\62\21\12"+
    "\14\0\43\12\1\67\3\12\1\70\2\12\1\134\1\71"+
    "\2\12\14\0\30\12\1\75\7\12\1\135\3\12\1\136"+
    "\11\12\14\0\34\12\1\100\21\12\14\0\42\12\1\103"+
    "\1\104\12\12\14\0\40\12\1\106\15\12\14\0\44\12"+
    "\1\24\11\12\14\0\30\12\1\112\15\12\1\113\2\12"+
    "\1\114\4\12\14\0\30\12\1\120\3\12\1\121\7\12"+
    "\1\122\11\12\14\0\40\12\1\124\15\12\14\0\34\12"+
    "\1\126\21\12\14\0\30\12\1\131\3\12\1\132\21\12"+
    "\7\137\1\140\62\137\2\53\1\141\1\53\1\142\65\53"+
    "\14\0\13\12\1\143\42\12\14\0\44\12\1\144\11\12"+
    "\14\0\21\12\1\145\34\12\14\0\1\12\1\146\54\12"+
    "\14\0\30\12\1\147\25\12\14\0\3\12\1\150\52\12"+
    "\14\0\32\12\1\151\23\12\14\0\22\12\1\152\33\12"+
    "\14\0\22\12\1\153\33\12\14\0\1\12\1\154\54\12"+
    "\14\0\3\12\1\155\52\12\14\0\50\12\1\156\5\12"+
    "\14\0\50\12\1\157\5\12\14\0\32\12\1\160\23\12"+
    "\14\0\13\12\1\161\42\12\14\0\15\12\1\162\40\12"+
    "\14\0\16\12\1\163\37\12\14\0\41\12\1\164\14\12"+
    "\14\0\50\12\1\165\5\12\14\0\20\12\1\166\35\12"+
    "\14\0\46\12\1\167\7\12\14\0\17\12\1\170\36\12"+
    "\14\0\11\12\1\171\10\12\1\172\33\12\14\0\45\12"+
    "\1\173\10\12\14\0\40\12\1\174\7\12\1\175\5\12"+
    "\14\0\5\12\1\176\50\12\14\0\34\12\1\177\21\12"+
    "\14\0\20\12\1\200\35\12\14\0\11\12\1\201\44\12"+
    "\14\0\2\12\1\202\53\12\14\0\46\12\1\203\7\12"+
    "\14\0\40\12\1\204\15\12\14\0\31\12\1\205\24\12"+
    "\14\0\11\12\1\206\3\12\1\207\40\12\14\0\22\12"+
    "\1\210\33\12\14\0\14\12\1\211\41\12\14\0\40\12"+
    "\1\212\2\12\1\213\12\12\14\0\50\12\1\214\5\12"+
    "\14\0\42\12\1\215\13\12\14\0\15\12\1\216\40\12"+
    "\14\0\43\12\1\217\12\12\14\0\25\12\1\220\30\12"+
    "\14\0\53\12\1\221\2\12\14\0\3\12\1\222\52\12"+
    "\14\0\20\12\1\223\35\12\14\0\32\12\1\224\23\12"+
    "\14\0\46\12\1\225\7\12\14\0\47\12\1\226\6\12"+
    "\14\0\30\12\1\227\25\12\14\0\43\12\1\230\12\12"+
    "\14\0\50\12\1\231\5\12\7\137\1\232\71\137\1\232"+
    "\3\137\1\233\56\137\2\0\1\141\103\0\5\12\1\234"+
    "\50\12\14\0\41\12\1\235\14\12\14\0\16\12\1\236"+
    "\37\12\14\0\21\12\1\237\34\12\14\0\47\12\1\240"+
    "\6\12\14\0\11\12\1\241\44\12\14\0\40\12\1\242"+
    "\15\12\14\0\5\12\1\243\12\12\1\244\35\12\14\0"+
    "\1\12\1\245\54\12\14\0\13\12\1\246\42\12\14\0"+
    "\5\12\1\247\50\12\14\0\34\12\1\250\11\12\1\251"+
    "\7\12\14\0\30\12\1\252\25\12\14\0\34\12\1\253"+
    "\21\12\14\0\21\12\1\254\34\12\14\0\1\12\1\255"+
    "\54\12\14\0\22\12\1\256\33\12\14\0\47\12\1\257"+
    "\6\12\14\0\30\12\1\260\25\12\14\0\5\12\1\261"+
    "\50\12\14\0\34\12\1\262\21\12\14\0\16\12\1\263"+
    "\1\12\1\264\35\12\14\0\3\12\1\265\52\12\14\0"+
    "\5\12\1\266\50\12\14\0\44\12\1\267\1\12\1\270"+
    "\7\12\14\0\32\12\1\271\23\12\14\0\34\12\1\272"+
    "\21\12\14\0\15\12\1\273\40\12\14\0\43\12\1\274"+
    "\12\12\14\0\1\12\1\275\54\12\14\0\15\12\1\276"+
    "\6\12\1\277\31\12\14\0\13\12\1\300\42\12\14\0"+
    "\30\12\1\275\25\12\14\0\43\12\1\301\6\12\1\302"+
    "\3\12\14\0\41\12\1\303\14\12\14\0\27\12\1\236"+
    "\26\12\14\0\7\12\1\216\46\12\14\0\16\12\1\304"+
    "\37\12\14\0\17\12\1\305\36\12\14\0\54\12\1\236"+
    "\1\12\14\0\36\12\1\217\17\12\14\0\44\12\1\306"+
    "\11\12\14\0\45\12\1\307\10\12\14\0\16\12\1\275"+
    "\37\12\14\0\44\12\1\275\11\12\14\0\22\12\1\254"+
    "\33\12\14\0\50\12\1\257\5\12\14\0\11\12\1\310"+
    "\44\12\14\0\4\12\1\311\51\12\14\0\40\12\1\312"+
    "\15\12\14\0\33\12\1\313\22\12\14\0\44\12\1\236"+
    "\11\12\14\0\41\12\1\314\14\12\14\0\30\12\1\315"+
    "\25\12\14\0\30\12\1\316\25\12\7\137\1\232\3\137"+
    "\1\141\56\137\14\0\1\12\1\317\54\12\14\0\34\12"+
    "\1\320\21\12\14\0\5\12\1\321\50\12\14\0\34\12"+
    "\1\321\21\12\14\0\14\12\1\322\41\12\14\0\42\12"+
    "\1\323\13\12\14\0\20\12\1\254\35\12\14\0\1\12"+
    "\1\324\54\12\14\0\22\12\1\325\33\12\14\0\23\12"+
    "\1\326\32\12\14\0\17\12\1\327\36\12\14\0\46\12"+
    "\1\257\7\12\14\0\30\12\1\330\25\12\14\0\50\12"+
    "\1\331\5\12\14\0\45\12\1\332\10\12\14\0\16\12"+
    "\1\333\37\12\14\0\13\12\1\236\42\12\14\0\1\12"+
    "\1\334\54\12\14\0\44\12\1\333\11\12\14\0\43\12"+
    "\1\335\12\12\14\0\4\12\1\336\51\12\14\0\33\12"+
    "\1\337\22\12\14\0\20\12\1\340\35\12\14\0\11\12"+
    "\1\341\44\12\14\0\11\12\1\145\44\12\14\0\15\12"+
    "\1\342\40\12\14\0\46\12\1\343\7\12\14\0\40\12"+
    "\1\344\15\12\14\0\40\12\1\226\15\12\14\0\43\12"+
    "\1\345\12\12\14\0\22\12\1\346\33\12\14\0\50\12"+
    "\1\347\5\12\14\0\3\12\1\350\52\12\14\0\1\12"+
    "\1\351\54\12\14\0\11\12\1\352\44\12\14\0\32\12"+
    "\1\353\23\12\14\0\30\12\1\354\25\12\14\0\40\12"+
    "\1\355\15\12\14\0\20\12\1\356\35\12\14\0\5\12"+
    "\1\357\50\12\14\0\46\12\1\360\7\12\14\0\34\12"+
    "\1\361\21\12\14\0\16\12\1\362\37\12\14\0\1\12"+
    "\1\363\54\12\14\0\44\12\1\362\11\12\14\0\30\12"+
    "\1\364\25\12\14\0\51\12\1\365\4\12\14\0\41\12"+
    "\1\236\14\12\14\0\43\12\1\366\12\12\14\0\30\12"+
    "\1\367\25\12\14\0\1\12\1\370\54\12\14\0\30\12"+
    "\1\371\25\12\14\0\4\12\1\372\51\12\14\0\11\12"+
    "\1\373\44\12\14\0\1\12\1\374\54\12\14\0\22\12"+
    "\1\216\33\12\14\0\33\12\1\375\22\12\14\0\40\12"+
    "\1\376\15\12\14\0\50\12\1\217\5\12\14\0\15\12"+
    "\1\377\40\12\14\0\50\12\1\u0100\5\12\14\0\1\12"+
    "\1\u0101\54\12\14\0\30\12\1\u0101\25\12\14\0\22\12"+
    "\1\u0102\33\12\14\0\14\12\1\u0103\41\12\14\0\22\12"+
    "\1\u0104\33\12\14\0\50\12\1\u0105\5\12\14\0\42\12"+
    "\1\u0106\13\12\14\0\50\12\1\u0107\5\12\14\0\20\12"+
    "\1\u0108\35\12\14\0\46\12\1\u0109\7\12\14\0\11\12"+
    "\1\u010a\44\12\14\0\4\12\1\u010b\51\12\14\0\3\12"+
    "\1\u010b\52\12\14\0\40\12\1\u010c\15\12\14\0\33\12"+
    "\1\u010d\22\12\14\0\32\12\1\u010d\23\12\14\0\15\12"+
    "\1\u010e\40\12\14\0\20\12\1\275\35\12\14\0\43\12"+
    "\1\u010f\12\12\14\0\46\12\1\275\7\12\14\0\4\12"+
    "\1\u0110\51\12\14\0\33\12\1\u0111\22\12\14\0\30\12"+
    "\1\u0112\25\12\14\0\50\12\1\u0113\5\12\14\0\13\12"+
    "\1\333\42\12\14\0\41\12\1\333\14\12\14\0\1\12"+
    "\1\236\54\12\14\0\3\12\1\u0114\52\12\14\0\20\12"+
    "\1\u0115\35\12\14\0\30\12\1\236\25\12\14\0\32\12"+
    "\1\u0116\23\12\14\0\22\12\1\u0117\33\12\14\0\34\12"+
    "\1\u0118\21\12\14\0\1\12\1\u0119\54\12\14\0\11\12"+
    "\1\u011a\44\12\14\0\1\12\1\357\54\12\14\0\30\12"+
    "\1\u011b\25\12\14\0\40\12\1\u011c\15\12\14\0\30\12"+
    "\1\361\25\12\14\0\1\12\1\u011d\54\12\14\0\30\12"+
    "\1\u011e\25\12\14\0\17\12\1\u011f\36\12\14\0\16\12"+
    "\1\321\37\12\14\0\45\12\1\u0120\10\12\14\0\44\12"+
    "\1\321\11\12\14\0\1\12\1\u0121\54\12\14\0\30\12"+
    "\1\u0122\25\12\14\0\5\12\1\243\50\12\14\0\34\12"+
    "\1\250\21\12\14\0\46\12\1\u0115\7\12\14\0\34\12"+
    "\1\333\21\12\14\0\16\12\1\u0123\37\12\14\0\44\12"+
    "\1\u0123\11\12\14\0\5\12\1\333\50\12\14\0\50\12"+
    "\1\333\5\12\14\0\20\12\1\u0101\35\12\14\0\20\12"+
    "\1\236\35\12\14\0\46\12\1\u0101\7\12\14\0\46\12"+
    "\1\236\7\12\14\0\21\12\1\275\34\12\14\0\47\12"+
    "\1\275\6\12\14\0\1\12\1\u0124\54\12\14\0\30\12"+
    "\1\u0125\25\12\14\0\20\12\1\333\35\12\14\0\46\12"+
    "\1\333\7\12\14\0\13\12\1\u0123\42\12\14\0\41\12"+
    "\1\u0123\14\12";

  private static int [] zzUnpacktrans() {
    int [] result = new int[16008];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\41\1\1\11\2\0\64\1"+
    "\2\0\1\11\70\1\1\0\213\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private TextColor textColor(long start, int size, Color color){
        return new TextColor((int) start, size, color);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerColor(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TextColor yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignorar */
            }
          // fall through
          case 16: break;
          case 2:
            { /*IGNORAR*/
            }
          // fall through
          case 17: break;
          case 3:
            { return textColor(yychar, yylength(), new Color(96, 96, 96));
            }
          // fall through
          case 18: break;
          case 4:
            { return textColor(yychar, yylength(), new Color(0, 0, 0));
            }
          // fall through
          case 19: break;
          case 5:
            { return textColor(yychar, yylength(), new Color(178, 34, 34));
            }
          // fall through
          case 20: break;
          case 6:
            { return textColor(yychar, yylength(), new Color(68, 196, 30));
            }
          // fall through
          case 21: break;
          case 7:
            { return textColor(yychar, yylength(), new Color(146, 146, 146));
            }
          // fall through
          case 22: break;
          case 8:
            { return textColor(yychar, yylength(), new Color(0, 0, 139));
            }
          // fall through
          case 23: break;
          case 9:
            { return textColor(yychar, yylength(), new Color(255, 140, 0));
            }
          // fall through
          case 24: break;
          case 10:
            { return textColor(yychar, yylength(), new Color(30,148,195));
            }
          // fall through
          case 25: break;
          case 11:
            { return textColor(yychar, yylength(), new Color(148, 58, 173));
            }
          // fall through
          case 26: break;
          case 12:
            { return textColor(yychar, yylength(), new Color(80,149,194));
            }
          // fall through
          case 27: break;
          case 13:
            { return textColor( yychar, yylength(), new Color(255, 140, 0));
            }
          // fall through
          case 28: break;
          case 14:
            { return textColor(yychar, yylength(), new Color(0, 0,139));
            }
          // fall through
          case 29: break;
          case 15:
            { return textColor(yychar, yylength(), new Color(89,179,192));
            }
          // fall through
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
